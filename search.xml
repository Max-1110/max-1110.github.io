<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HiveSQL部分题目(1-11)</title>
    <url>/2020/11/24/HiveSQL%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE(1)/</url>
    <content><![CDATA[<p>HiveSQL的语法上和SQL还是非常像的，本文主要是记录了一些HQL的相关题目。比较简单的题一笔带过了，思路复杂一些的则会花大点的篇幅重点分析。</p>
<a id="more"></a>

<h3 id="1-执行顺序"><a href="#1-执行顺序" class="headerlink" title="1.执行顺序"></a>1.执行顺序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FROM<span class="comment">--&gt;ON--&gt;JOIN--&gt;WHERE--&gt;GROUP BY--&gt;WITH(CUBE/ROLLUP)--&gt;HAVING--&gt;SELECT--&gt;DISTINCT--&gt;ORDER BY--&gt;LIMIT</span></span><br></pre></td></tr></table></figure>

<h3 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h3><p>有很多题目可以用不同的解题思路，比如第1部分第5题，除了常规用法还可以用窗口函数。实际工作时要选择更为高效的解决方案。</p>
<h2 id="题目篇"><a href="#题目篇" class="headerlink" title="题目篇"></a>题目篇</h2><p><strong>（本篇重点为第9题）</strong></p>
<ol>
<li><p>选出城市在北京，性别为女的10个用户名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_id,user_name</span><br><span class="line"><span class="keyword">FROM</span> user_info</span><br><span class="line"><span class="keyword">WHERE</span> city=<span class="string">&#x27;Beijing&#x27;</span> <span class="keyword">AND</span> sex = <span class="string">&#x27;female&#x27;</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2019年4月9号，购买品类为food的明细（用户名，购买数，支付金额）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_name,piece,pay_amount</span><br><span class="line"><span class="keyword">FROM</span> user_trade</span><br><span class="line"><span class="keyword">WHERE</span> goods_category=<span class="string">&#x27;food&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> dt=<span class="string">&#x27;2019-04-09&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2019年1月-4月，每个品类有多少人购买，累计金额是多少</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> goods_category,<span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> user_name),<span class="keyword">SUM</span>(pay_amount) <span class="keyword">as</span> total_pay</span><br><span class="line"><span class="keyword">FROM</span> user_trade</span><br><span class="line"><span class="keyword">WHERE</span> dt <span class="keyword">BETWEEN</span> <span class="string">&#x27;2019-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2019-04-30&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> goods_category;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2019年4月，支付金额超过5万元的用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_name,<span class="keyword">SUM</span>(pay_amount) <span class="keyword">as</span> total_pay</span><br><span class="line"><span class="keyword">FROM</span> user_trade</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">substr</span>(dt,<span class="number">1</span>,<span class="number">7</span>)=<span class="string">&#x27;2019-04&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_name</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">SUM</span>(pay_amount)&gt;<span class="number">50000</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2019年4月，支付金额最多的TOP5用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 写法1 (43.638seconds)</span></span><br><span class="line"><span class="keyword">SELECT</span> user_name,<span class="keyword">SUM</span>(pay_amount) <span class="keyword">as</span> total_pay</span><br><span class="line"><span class="keyword">FROM</span> user_trade</span><br><span class="line"><span class="keyword">WHERE</span> dt <span class="keyword">BETWEEN</span> <span class="string">&#x27;2019-04-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2019-04-30&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_pay <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">-- </span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 写法2 (45.074seconds)</span></span><br><span class="line"><span class="keyword">SELECT</span> a.user_name,a.total_pay,a.rank</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> user_name, <span class="keyword">SUM</span>(pay_amount) <span class="keyword">as</span> total_pay,</span><br><span class="line">        row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">SUM</span>(pay_amount) <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span>         </span><br><span class="line"><span class="keyword">FROM</span> user_trade</span><br><span class="line"><span class="keyword">WHERE</span> dt <span class="keyword">BETWEEN</span> <span class="string">&#x27;2019-04-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2019-04-30&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_name) a</span><br><span class="line"><span class="keyword">where</span> a.rank&lt;=<span class="number">5</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>把2019年4月9日，所有支付的时间戳转化为具体时间</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pay_time,from_unixtime(pay_time,<span class="string">&#x27;yyyy-mm-dd hh:mm:ss&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> user_trade</span><br><span class="line"><span class="keyword">WHERE</span> dt=<span class="string">&#x27;2019-04-09&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>把2019年4月9日转化为时间戳(没啥意义感觉)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">unix_timestamp</span>(<span class="string">&#x27;2019-04-09 00:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> user_trade</span><br><span class="line"><span class="keyword">WHERE</span> dt=<span class="string">&#x27;2019-04-09&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>每个用户首次激活时间距离2019年5月1日的日期间隔</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_id,user_name,</span><br><span class="line">       firstactivetime,<span class="keyword">datediff</span>(<span class="string">&#x27;2019-05-01&#x27;</span>,firstactivetime) <span class="keyword">as</span> diff </span><br><span class="line"><span class="keyword">FROM</span> user_info;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>统计以下四个年龄段20岁以下、20-30岁、30-40岁、40岁以上的用户数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 写法1</span></span><br><span class="line"><span class="keyword">SELECT</span> a.age_type,<span class="keyword">COUNT</span>(a.user_id)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> user_id,</span><br><span class="line">       <span class="keyword">CASE</span> <span class="keyword">WHEN</span> age&lt;<span class="number">20</span> <span class="keyword">THEN</span> <span class="string">&#x27;20岁以下&#x27;</span></span><br><span class="line">            <span class="keyword">WHEN</span> age&gt;=<span class="number">20</span> <span class="keyword">and</span> age&lt;<span class="number">30</span> <span class="keyword">THEN</span> <span class="string">&#x27;20-30岁&#x27;</span></span><br><span class="line">            <span class="keyword">WHEN</span> age&gt;=<span class="number">30</span> <span class="keyword">and</span> age&lt;<span class="number">40</span> <span class="keyword">THEN</span> <span class="string">&#x27;30-40岁&#x27;</span></span><br><span class="line">            <span class="keyword">ELSE</span> <span class="string">&#x27;40岁以上&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> age_type</span><br><span class="line"><span class="keyword">FROM</span> user_info) a</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> a.age_type;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 写法2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> age&lt;<span class="number">20</span> <span class="keyword">THEN</span> <span class="string">&#x27;20岁以下&#x27;</span></span><br><span class="line">            <span class="keyword">WHEN</span> age&gt;=<span class="number">20</span> <span class="keyword">and</span> age&lt;<span class="number">30</span> <span class="keyword">THEN</span> <span class="string">&#x27;20-30岁&#x27;</span></span><br><span class="line">            <span class="keyword">WHEN</span> age&gt;=<span class="number">30</span> <span class="keyword">and</span> age&lt;<span class="number">40</span> <span class="keyword">THEN</span> <span class="string">&#x27;30-40岁&#x27;</span></span><br><span class="line">            <span class="keyword">ELSE</span> <span class="string">&#x27;40岁以上&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> age_type,</span><br><span class="line">            <span class="keyword">COUNT</span>(user_id)</span><br><span class="line"><span class="keyword">FROM</span> user_info</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> age&lt;<span class="number">20</span> <span class="keyword">THEN</span> <span class="string">&#x27;20岁以下&#x27;</span></span><br><span class="line">            <span class="keyword">WHEN</span> age&gt;=<span class="number">20</span> <span class="keyword">and</span> age&lt;<span class="number">30</span> <span class="keyword">THEN</span> <span class="string">&#x27;20-30岁&#x27;</span></span><br><span class="line">            <span class="keyword">WHEN</span> age&gt;=<span class="number">30</span> <span class="keyword">and</span> age&lt;<span class="number">40</span> <span class="keyword">THEN</span> <span class="string">&#x27;30-40岁&#x27;</span></span><br><span class="line">            <span class="keyword">ELSE</span> <span class="string">&#x27;40岁以上&#x27;</span> <span class="keyword">END</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>统计每个性别用户等级高低的分布情况（level&gt;5为高级）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex,</span><br><span class="line">       <span class="keyword">IF</span>(<span class="keyword">level</span>&gt;<span class="number">5</span>,<span class="string">&#x27;高级用户&#x27;</span>,<span class="string">&#x27;普通用户&#x27;</span>) <span class="keyword">as</span> user_level,</span><br><span class="line">       <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> user_id)</span><br><span class="line"><span class="keyword">FROM</span> user_info</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex,<span class="keyword">IF</span>(<span class="keyword">level</span>&gt;<span class="number">5</span>,<span class="string">&#x27;高级用户&#x27;</span>,<span class="string">&#x27;普通用户&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>每个月新激活的用户数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 写法1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>(firstactivetime),<span class="keyword">month</span>(firstactivetime),</span><br><span class="line">       <span class="keyword">count</span>(<span class="keyword">distinct</span> user_id)</span><br><span class="line"><span class="keyword">FROM</span> user_info</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">year</span>(firstactivetime),<span class="keyword">month</span>(firstactivetime);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 写法2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">substr</span>(firstactivetime,<span class="number">1</span>,<span class="number">7</span>) <span class="keyword">as</span> active_time,</span><br><span class="line">       <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> user_id)</span><br><span class="line"><span class="keyword">FROM</span> user_info</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">substr</span>(firstactivetime,<span class="number">1</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Hive</category>
        <category>HiveSQL语法</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>R²和Adjusted R²</title>
    <url>/2020/11/17/R-square/</url>
    <content><![CDATA[<p>未完待续</p>
<p>在构建好机器学习模型后，评判该模型是否优秀是非常重要的。本文简单的介绍了一种机器学习种较为常用的模型评估方法，即R²。</p>
<a id="more"></a>

<h1 id="1-Why-R²"><a href="#1-Why-R²" class="headerlink" title="1.Why R²"></a>1.Why R²</h1><p>在常用的评判指标中，我们比较熟悉的一个是均方误差：MSE (<em>mean-square error</em>)。但是使用均方误差时要注意量纲及标准化的问题，比如针对同一个数据集，模型第一次拟合出来的MSE为e1，若把数据集中所有的数据都同步缩小100倍，MSE却会极大程度的缩小。但是这能说明第二次拟合的效果要远远好于第一次吗？</p>
<p>答案显然是不能的。所以为了避免这种情况发生，我们希望找到一个相对稳定的评判标准，无论我对原始数据如何缩放，它的量级却不会发生变化，而这个评判标准就是R²。</p>
]]></content>
      <categories>
        <category>统计学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql-两种“连续”的题型</title>
    <url>/2020/12/25/Sql-%E4%B8%A4%E7%A7%8D%E2%80%9C%E8%BF%9E%E7%BB%AD%E2%80%9D%E7%9A%84%E9%A2%98%E5%9E%8B/</url>
    <content><![CDATA[<p>本篇blog主要记录了在刷leetcode中遇到的两种<strong>求连续</strong>类型的题目。分别是180题和601题，不同的是180题只要找出连续出现的即可（去重），而601题需要把所有符合条件且连续的case全找出来。</p>
<a id="more"></a>

<h3 id="180题："><a href="#180题：" class="headerlink" title="180题："></a>180题：</h3><p>编写一个 SQL 查询，查找所有至少连续出现三次的数字。</p>
<p>例题：</p>
<p>+—-+—–+<br>| Id | Num |<br>+—-+—–+<br>| 1  |  1  |<br>| 2  |  1  |<br>| 3  |  1  |<br>| 4  |  2  |<br>| 5  |  1  |<br>| 6  |  2  |<br>| 7  |  2  |<br>+—-+—–+</p>
<p>上表结果：</p>
<p>+—————–+<br>| ConsecutiveNums |<br>+—————–+<br>| 1               |<br>+—————–+</p>
<p><strong>解法</strong></p>
<p>依靠变量实现：注意变量要先命名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tmp.num ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">num</span>,</span><br><span class="line">       <span class="keyword">case</span> <span class="keyword">when</span> @pre = <span class="keyword">num</span> <span class="keyword">THEN</span> @cnt := cnt+<span class="number">1</span></span><br><span class="line">            <span class="keyword">when</span> @pre:= <span class="keyword">num</span> <span class="keyword">THEN</span> @cnt := <span class="number">1</span> <span class="keyword">END</span> <span class="keyword">as</span> <span class="string">&#x27;times&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">logs</span> l, (<span class="keyword">SELECT</span> @pre:= <span class="literal">null</span>, @cnt:=<span class="number">0</span>) t) tmp</span><br><span class="line"><span class="keyword">WHERE</span> tmp.times &gt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>或者这么写：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tmp.num ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> l.num,</span><br><span class="line">        @cnt:= <span class="keyword">IF</span>(@pre = l.num, @cnt+<span class="number">1</span>, <span class="number">1</span>) times,</span><br><span class="line">        @pre:= l.num</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">logs</span> l, (<span class="keyword">SELECT</span> @pre:= <span class="literal">null</span>, @cnt:=<span class="number">0</span>) t) tmp</span><br><span class="line"><span class="keyword">WHERE</span> tmp.times &gt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="601题："><a href="#601题：" class="headerlink" title="601题："></a>601题：</h3><p>表：Stadium<br>每日人流量信息被记录在这三列信息中：序号 (id)、日期 (visit_date)、 人流量 (people)，visit_date 是表的主键，每天只有一行记录，日期随着 id 的增加而增加。</p>
<p>编写一个 SQL 查询以找出每行的人数大于或等于 100 且 id 连续的三行或更多行记录。返回按 visit_date 升序排列的结果表。</p>
<p>查询结果格式如下所示。</p>
<p>Stadium table:<br>+——+————+———–+<br>| id   | visit_date | people    |<br>+——+————+———–+<br>| 1    | 2017-01-01 | 10         |<br>| 2    | 2017-01-02 | 109       |<br>| 3    | 2017-01-03 | 150       |<br>| 4    | 2017-01-04 | 99         |<br>| 5    | 2017-01-05 | 145       |<br>| 6    | 2017-01-06 | 1455     |<br>| 7    | 2017-01-07 | 199       |<br>| 8    | 2017-01-09 | 188       |<br>+——+————+———–+</p>
<p>Result table:<br>+——+————+———–+<br>| id   | visit_date | people    |<br>+——+————+———–+<br>| 5    | 2017-01-05 | 145       |<br>| 6    | 2017-01-06 | 1455     |<br>| 7    | 2017-01-07 | 199       |<br>| 8    | 2017-01-09 | 188       |<br>+——+————+———–+</p>
<p><strong>解法：</strong></p>
<p>row_number() + count() over() 窗口函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.id, o.visit_date, o.people</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> t.*, <span class="keyword">count</span>(*) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> t.flag) day_num</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> *, (<span class="keyword">id</span>-row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>)) flag </span><br><span class="line"><span class="keyword">FROM</span> stadium </span><br><span class="line"><span class="keyword">WHERE</span> people&gt;=<span class="number">100</span>) t) o</span><br><span class="line"><span class="keyword">WHERE</span> o.day_num&gt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>这两道题的不同点：虽然两道题都是找连续，但是180题是把形成连续的数字摘出来，结果只需要1个；而601题要把开始连续到结束连续的所有结果都取出来。</p>
<p>601题也可以变化成类似连续数字的题目。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果我新增一列</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>-row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> visit_date)) flag</span><br><span class="line"><span class="keyword">FROM</span> stadium</span><br><span class="line"><span class="keyword">WHERE</span> people &gt; <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>则flag列会体现出类似于180题连续数字的特征。简单画一个表格，注意先筛选people&gt;100的行。</p>
<table>
<thead>
<tr>
<th>id</th>
<th>date</th>
<th>flag</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>2017.10.2</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>2017.10.3</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>2017.10.5</td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td>2017.10.6</td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td>2017.10.7</td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td>2017.10.10</td>
<td>4</td>
</tr>
<tr>
<td>11</td>
<td>2017.10.11</td>
<td>4</td>
</tr>
<tr>
<td>13</td>
<td>2017.10.13</td>
<td>5</td>
</tr>
</tbody></table>
<p>可以看到如果对flag列来一个：连续出现三个的数字，那题目就和180题一模一样了，只需要选出一行即可。但601题需要把这些连续行都选出来，所以要接着用count() over()进行实现；另外一个不同点是flag列保证了所有数字不会反复出现，一个数字一旦更改后就再也不会出现，而180题中恰恰相反。</p>
<p>所以180题更注重的是previous和当前的num之间的差别，而601题更注重如何找到不反复出现的连续数字，并不加整合的计算出现次数。</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>窗口函数好像不能嵌套使用，我刚刚想：</p>
<p><code>count(*) over(partition by (id-row_number() over(order by visit_date))) cnt</code></p>
<p>直接一步到位，但是程序出错了。报错：</p>
<p>You cannot nest a window function in the specification of window ‘<unnamed window>‘.</p>
<p>大意应该是无法在一个指定的却命名的窗口函数上再编一层窗口函数，所以要注意如果使用窗口函数，应该select出来，命名后搞成新表，再在新表中编新的窗口函数。</p>
]]></content>
      <categories>
        <category>SQL</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL_互相关注的对数</title>
    <url>/2020/10/27/Sql-%E4%BA%92%E7%9B%B8%E5%85%B3%E6%B3%A8%E7%9A%84%E7%94%A8%E6%88%B7%E5%AF%B9%E6%95%B0/</url>
    <content><![CDATA[<p>表名：user_table</p>
<p>字段：user_id, follower_id</p>
<p>描述：该表统计了每个用户的id，以及其所关注的用户的id，求互相关注的用户的对数。</p>
<a id="more"></a>

<h2 id="（1）sql写法"><a href="#（1）sql写法" class="headerlink" title="（1）sql写法"></a>（1）sql写法</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(a.user_id)/<span class="number">2</span> following_pairs</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> t1.user_id,t1.follower_id</span><br><span class="line"><span class="keyword">FROM</span> user_table t1 <span class="keyword">JOIN</span> user_table t2</span><br><span class="line"><span class="keyword">ON</span> t1.user_id = t2.follower_id <span class="keyword">AND</span> t1.follower_id = t2.user_id) a</span><br></pre></td></tr></table></figure>

<h2 id="（2）思路及注意事项"><a href="#（2）思路及注意事项" class="headerlink" title="（2）思路及注意事项"></a>（2）思路及注意事项</h2><ol>
<li>最普适的方法是表联结，无论是给id还是用户名都可以这么做：让表1中的follower充当表2的user，表1中的user充当表2中的follower。这样可以把所有互相关注的user找出来。不过结果是成双对出现的，比如1 2 2 1和2 1 1 2都会被收录，但是他们表达的都是user1和user2互相关注，所以最后的count要除以2。</li>
<li>由于两个表字段完全一样，所以内部的SELECT不要写*，否则会出现字段冲突。要么选择其中2个，要么重新命名。</li>
<li>COUNT(a.*)报错，是否count ( * )是唯一正确用法？</li>
</ol>
<h2 id="（3）举一反三"><a href="#（3）举一反三" class="headerlink" title="（3）举一反三"></a>（3）举一反三</h2>]]></content>
      <categories>
        <category>SQL</category>
        <category>SQL随笔</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql-删除重复邮箱</title>
    <url>/2020/12/25/Sql-%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%82%AE%E7%AE%B1/</url>
    <content><![CDATA[<p>编写一个 SQL 查询，来删除 <code>Person</code> 表中所有重复的电子邮箱，重复的邮箱里只保留 <strong>Id</strong> <em>最小</em> 的那个。</p>
<a id="more"></a>

<p>+—-+——————+<br>| Id | Email            |<br>+—-+——————+<br>| 1  | <a href="mailto:&#106;&#111;&#104;&#110;&#x40;&#x65;&#120;&#97;&#109;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;">&#106;&#111;&#104;&#110;&#x40;&#x65;&#120;&#97;&#109;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;</a> |<br>| 2  | <a href="mailto:&#x62;&#111;&#x62;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;">&#x62;&#111;&#x62;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;</a>  |<br>| 3  | <a href="mailto:&#x6a;&#111;&#x68;&#x6e;&#64;&#101;&#120;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#x6d;">&#x6a;&#111;&#x68;&#x6e;&#64;&#101;&#120;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a> |<br>+—-+——————+<br>Id 是这个表的主键。</p>
<p>例如，在运行你的查询语句之后，上面的 <code>Person</code> 表应返回以下几行:</p>
<p>+—-+——————+<br>| Id | Email            |<br>+—-+——————+<br>| 1  | <a href="mailto:&#x6a;&#x6f;&#x68;&#110;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#x6d;">&#x6a;&#x6f;&#x68;&#110;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#x6d;</a> |<br>| 2  | <a href="mailto:&#x62;&#111;&#x62;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;">&#x62;&#111;&#x62;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;</a>  |<br>+—-+——————+</p>
<p><strong>解法：</strong></p>
<p>题目本身不难，但是有一个点需要注意：</p>
<p>mySQL中不允许在同一个表里同时进行查找和更新操作，否则会报错：</p>
<p><code>You can&#39;t specify target table &#39;PERSON&#39; for update in FROM clause</code></p>
<p>所以要把查找出来的东西先放在另一个表里（这里是t）过渡一下。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> PERSON</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> t.m_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(<span class="keyword">id</span>) m_id</span><br><span class="line"><span class="keyword">FROM</span> person <span class="keyword">GROUP</span> <span class="keyword">BY</span> email) t</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql-建表相关操作</title>
    <url>/2020/11/24/Sql-%E5%BB%BA%E8%A1%A8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>在日常工作中，SQL更多的是用来提取业务相关的数据，大部分人都没办法直接处理原数据。所以平时练的最多的也是SELECT语句，而有关建表、处理表的操作很少涉及。所以在这里把表处理的相关操作记录一下吧，毕竟熟能生巧啊（省的每次都要上网重新搜）。</p>
<a id="more"></a>

<h2 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h2><h3 id="（1）创建-CREATE"><a href="#（1）创建-CREATE" class="headerlink" title="（1）创建-CREATE"></a>（1）创建-CREATE</h3><h4 id="A-创建数据库"><a href="#A-创建数据库" class="headerlink" title="A.创建数据库"></a>A.创建数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database 数据库名;</span><br></pre></td></tr></table></figure>

<p><strong>练习：创建learning数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database learning;</span><br></pre></td></tr></table></figure>

<h4 id="B-创建表"><a href="#B-创建表" class="headerlink" title="B.创建表"></a>B.创建表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名</span><br><span class="line">(</span><br><span class="line">    字段1 数据类型,</span><br><span class="line">    字段2 数据类型,</span><br><span class="line">    ...</span><br><span class="line">    PRIMARY KEY (字段)</span><br><span class="line">)ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;表里的内容&#39;</span><br></pre></td></tr></table></figure>

<p><strong>练习：创建表order_2017</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE order_2017</span><br><span class="line">(</span><br><span class="line">    &#96;order_id&#96;varchar(20) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;唯一的订单编号&#39;,</span><br><span class="line">    &#96;cust_id&#96; varchar(20) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;顾客id&#39;,</span><br><span class="line">    &#96;date&#96; date DEFAULT NULL COMMENT &#39;交易日&#39;, </span><br><span class="line">    &#96;original_value&#96; double(10,2) DEFAULT &#39;0.00&#39; COMMENT &#39;原价&#39;,</span><br><span class="line">    &#96;discount&#96; double(10,2) DEFAULT &#39;0.00&#39; COMMENT &#39;折扣金额&#39;,</span><br><span class="line">    &#96;items&#96; int(11) DEFAULT &#39;0&#39; COMMENT &#39;成交量&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;order_id&#96;)</span><br><span class="line">)ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;2017订单表&#39;; </span><br><span class="line"></span><br><span class="line">#即使数字也要加引号</span><br><span class="line">#如果可以为空则无NOT NULL</span><br></pre></td></tr></table></figure>

<h3 id="（2）增加数据"><a href="#（2）增加数据" class="headerlink" title="（2）增加数据"></a>（2）增加数据</h3><h4 id="A-增加一行"><a href="#A-增加一行" class="headerlink" title="A.增加一行"></a>A.增加一行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#不加字段</span><br><span class="line">INSERT INTO 表名</span><br><span class="line">VALUES</span><br><span class="line">(value1,value2,...)</span><br><span class="line">#values按照位置填如相应字段</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#加字段</span><br><span class="line">INSERT INTO 表名</span><br><span class="line">(字段1,字段2,...)</span><br><span class="line">VALUES</span><br><span class="line">(value1,value2,...)</span><br></pre></td></tr></table></figure>

<h4 id="B-增加多行"><a href="#B-增加多行" class="headerlink" title="B.增加多行"></a>B.增加多行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名</span><br><span class="line">(字段1,字段2,...)</span><br><span class="line">VALUES</span><br><span class="line">(value1,value2,...),</span><br><span class="line">(value1,value2,...),</span><br><span class="line">(value1,value2,...),</span><br><span class="line">(value1,value2,...),</span><br><span class="line">...</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p><strong>练习：在表order_2017插入值</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSERT INTO order_2017</span><br><span class="line">(`order_id`,`cust_id`,`date`,`original_value`,`discount`,`items`)</span><br><span class="line">VALUES</span><br><span class="line">(<span class="string">&#x27;0001&#x27;</span>,<span class="string">&#x27;c1&#x27;</span>,<span class="string">&#x27;2017-03-28&#x27;</span>,<span class="string">&#x27;199&#x27;</span>,<span class="string">&#x27;99&#x27;</span>,<span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;0002&#x27;</span>,<span class="string">&#x27;c2&#x27;</span>,<span class="string">&#x27;2017-06-28&#x27;</span>,<span class="string">&#x27;30.7&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;3&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;0003&#x27;</span>,<span class="string">&#x27;c3&#x27;</span>,<span class="string">&#x27;2017-01-03&#x27;</span>,<span class="string">&#x27;49.9&#x27;</span>,<span class="string">&#x27;19&#x27;</span>,<span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;0004&#x27;</span>,<span class="string">&#x27;c2&#x27;</span>,<span class="string">&#x27;2017-02-20&#x27;</span>,<span class="string">&#x27;125&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在navicat中INSERT INTO后，需要点业面底部的刷新才行，其他的都不好使。</span></span><br><span class="line"><span class="comment">#但在命令行里SELECT * 可以立马看到。</span></span><br></pre></td></tr></table></figure>

<h2 id="2-改"><a href="#2-改" class="headerlink" title="2.改"></a>2.改</h2><h3 id="（1）更新数据UPDATE"><a href="#（1）更新数据UPDATE" class="headerlink" title="（1）更新数据UPDATE"></a>（1）更新数据UPDATE</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE 表名</span><br><span class="line">SET 字段&#x3D;新值</span><br><span class="line">WHERE 字段&#x3D;旧值; #更新的定位条件</span><br></pre></td></tr></table></figure>

<p>练习：把订单ID为’0002’的订单日期改为’2017-04-01’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE order_2017</span><br><span class="line">SET date &#x3D; &#39;2017-04-01&#39;</span><br><span class="line">WHERE order_id &#x3D; &#39;0002&#39;</span><br></pre></td></tr></table></figure>

<h3 id="（2）更新表结构ALTER"><a href="#（2）更新表结构ALTER" class="headerlink" title="（2）更新表结构ALTER"></a>（2）更新表结构ALTER</h3><h4 id="A-增加列"><a href="#A-增加列" class="headerlink" title="A.增加列"></a>A.增加列</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名</span><br><span class="line">ADD 字段名 数据类型;</span><br></pre></td></tr></table></figure>

<p><strong>练习：在order_2017表中，增加一列’spend’代表实付金额</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE order_2017</span><br><span class="line">ADD spend double(10,2);</span><br><span class="line">#注意加TABLE，此外spend无需加波浪号</span><br></pre></td></tr></table></figure>

<h4 id="B-删除列"><a href="#B-删除列" class="headerlink" title="B.删除列"></a>B.删除列</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名</span><br><span class="line">DROP 字段名;</span><br></pre></td></tr></table></figure>

<p><strong>练习：在order_2017表中，删除’spend’列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE order_2017</span><br><span class="line">DROP spend;</span><br></pre></td></tr></table></figure>

<h2 id="3-删"><a href="#3-删" class="headerlink" title="3.删"></a>3.删</h2><p>所有删除中只有删除行使用DELETE，其他无论是删除列还是表还是库都用DROP。</p>
<h3 id="（1）删除行delete"><a href="#（1）删除行delete" class="headerlink" title="（1）删除行delete"></a>（1）删除行delete</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM 表名</span><br><span class="line">WHERE condition;#删除的条件</span><br></pre></td></tr></table></figure>

<p><strong>练习：在order_2017表中，删除订单ID为’0002’的行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM order_2017</span><br><span class="line">WHERE order_id &#x3D; &#39;0002&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="（2）删除表"><a href="#（2）删除表" class="headerlink" title="（2）删除表"></a>（2）删除表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE 表名;</span><br></pre></td></tr></table></figure>

<p><strong>练习：删除order_2017表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE order_2017;</span><br></pre></td></tr></table></figure>

<h3 id="（3）删库"><a href="#（3）删库" class="headerlink" title="（3）删库"></a>（3）删库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP DATABASE 数据库名;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
        <category>SQL随笔</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-留存率计算</title>
    <url>/2020/10/27/Sql-%E7%94%A8%E6%88%B7%E7%95%99%E5%AD%98%E7%8E%87%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p>表名：user_log</p>
<p>字段：device_id, log_time</p>
<p>描述：device_id为用户的设备id（unique），log_time为用户的登陆时间记录</p>
<p><strong>要求：计算某段日期内用户的次日，3日，7日，15日留存率</strong></p>
<a id="more"></a>

<h2 id="（1）sql写法"><a href="#（1）sql写法" class="headerlink" title="（1）sql写法"></a>（1）sql写法</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t1.first_login_date,</span><br><span class="line">       <span class="keyword">CONCAT</span>(<span class="number">100</span>*<span class="keyword">round</span>(t1<span class="number">.2</span>_day_user/t1.first_day_users,<span class="number">4</span>),<span class="string">&quot;%&quot;</span>) rate_2,</span><br><span class="line">       <span class="keyword">CONCAT</span>(<span class="number">100</span>*<span class="keyword">round</span>(t1<span class="number">.3</span>_user/t1.first_day_users,<span class="number">4</span>),<span class="string">&quot;%&quot;</span>) rate_3,</span><br><span class="line">       <span class="keyword">CONCAT</span>(<span class="number">100</span>*<span class="keyword">round</span>(t1<span class="number">.7</span>_user/t1.first_day_users,<span class="number">4</span>),<span class="string">&quot;%&quot;</span>) rate_7,</span><br><span class="line">       <span class="keyword">CONCAT</span>(<span class="number">100</span>*<span class="keyword">round</span>(t1<span class="number">.15</span>_day_user/t1.first_day_users,<span class="number">4</span>),<span class="string">&quot;%&quot;</span>) rate_15,</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> a.first_login_date, </span><br><span class="line">       <span class="keyword">COUNT</span>(<span class="keyword">distinct</span> a.device_id) first_day_users,</span><br><span class="line">       <span class="keyword">COUNT</span>(<span class="keyword">distinct</span> b.device_id) <span class="number">2</span>_day_users,</span><br><span class="line">       <span class="keyword">COUNT</span>(<span class="keyword">distinct</span> c.device_id) <span class="number">3</span>_day_users,</span><br><span class="line">       <span class="keyword">COUNT</span>(<span class="keyword">distinct</span> d.device_id) <span class="number">7</span>_day_users,</span><br><span class="line">       <span class="keyword">COUNT</span>(<span class="keyword">distinct</span> e.device_id) <span class="number">15</span>_day_users</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> device_id, <span class="keyword">min</span>(log_time) first_login_date</span><br><span class="line"><span class="keyword">FROM</span> user_log</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> device_id) a </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">user_log b <span class="keyword">ON</span> a.device_id = b.device_id <span class="keyword">AND</span> DATADIFF(b.log_time, a.first_login_date)=<span class="number">1</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">user_log c <span class="keyword">ON</span> a.device_id = c.device_id <span class="keyword">AND</span> DATADIFF(c.log_time, a.first_login_date)=<span class="number">2</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">user_log d <span class="keyword">ON</span> a.device_id = d.device_id <span class="keyword">AND</span> DATADIFF(d.log_time, a.first_login_date)=<span class="number">6</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">user_log e <span class="keyword">ON</span> a.device_id = e.device_id <span class="keyword">AND</span> DATADIFF(e.log_time, a.first_login_date)=<span class="number">14</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.first_login_date) t1</span><br></pre></td></tr></table></figure>

<h2 id="（2）思路及注意事项"><a href="#（2）思路及注意事项" class="headerlink" title="（2）思路及注意事项"></a>（2）思路及注意事项</h2><ol>
<li>首先要求出每个用户第一次登录的时间，并以此表作为基础，左联其他表格。</li>
<li>求留存时按照first_login_date分组，可以求得不同天的登录用户数。</li>
<li>常用函数DATEDIFF, ROUND, CONCAT的用法</li>
</ol>
<h2 id="（3）举一反三"><a href="#（3）举一反三" class="headerlink" title="（3）举一反三"></a>（3）举一反三</h2>]]></content>
      <categories>
        <category>SQL</category>
        <category>SQL随笔</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL经典50题(1-6)</title>
    <url>/2020/11/16/Sql-%E7%BB%8F%E5%85%B850%E9%A2%98(1-6)/</url>
    <content><![CDATA[<p>SQL经典50题，在网上比较有名，B站的链接是<a href="https://www.bilibili.com/video/BV1q4411G7Lw?p=9">https://www.bilibili.com/video/BV1q4411G7Lw?p=9</a> </p>
<p>4个表格基于学生，成绩，课程，教师，与真正面试时及实际工作中的业务场景还有一定差距。比较适合面试前练手以及熟悉SQL中比较基础的操作，比如表联结、子查询等。</p>
<p>在这个系列中，我尽量把每道题能想到的思路都进行实现，同时部分题目进行了一定拓展。</p>
<a id="more"></a>

<h4 id="1-查询课程编号为“01”的课程比“02”的课程成绩高的所有学生的学号（重点）"><a href="#1-查询课程编号为“01”的课程比“02”的课程成绩高的所有学生的学号（重点）" class="headerlink" title="1.查询课程编号为“01”的课程比“02”的课程成绩高的所有学生的学号（重点）"></a>1.查询课程编号为“01”的课程比“02”的课程成绩高的所有学生的学号（重点）</h4><h5 id="思路1，自联结"><a href="#思路1，自联结" class="headerlink" title="思路1，自联结"></a>思路1，自联结</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> s1.s_id</span><br><span class="line"><span class="keyword">from</span> score s1, score s2</span><br><span class="line"><span class="keyword">WHERE</span> s1.c_id = <span class="string">&#x27;01&#x27;</span> <span class="keyword">AND</span> s2.c_id = <span class="string">&#x27;02&#x27;</span> <span class="keyword">AND</span> s1.s_id = s2.s_id <span class="keyword">AND</span> s1.s_score &gt; s2.s_score;</span><br></pre></td></tr></table></figure>

<h5 id="思路2，直观思路–稍微拓展-显示学生姓名"><a href="#思路2，直观思路–稍微拓展-显示学生姓名" class="headerlink" title="思路2，直观思路–稍微拓展: 显示学生姓名"></a>思路2，直观思路–稍微拓展: 显示学生姓名</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> s1.s_id <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">       s3.s_name <span class="string">&#x27;姓名&#x27;</span>, </span><br><span class="line">       s1.s_score <span class="string">&#x27;01&#x27;</span>, </span><br><span class="line">       s2.s_score <span class="string">&#x27;02&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(<span class="keyword">Select</span> s_id, s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id = <span class="string">&#x27;01&#x27;</span>) s1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">Select</span> s_id, s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id = <span class="string">&#x27;02&#x27;</span>) s2</span><br><span class="line"><span class="keyword">ON</span> s1.s_id = s2.s_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">student s3 <span class="keyword">ON</span> s2.s_id = s3.s_id </span><br><span class="line"><span class="keyword">WHERE</span> s1.s_score &gt; s2.s_score;</span><br></pre></td></tr></table></figure>

<h5 id="拓展，如果有缺考的课记为0分-其余条件不变"><a href="#拓展，如果有缺考的课记为0分-其余条件不变" class="headerlink" title="拓展，如果有缺考的课记为0分,其余条件不变"></a>拓展，如果有缺考的课记为0分,其余条件不变</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> s1.s_id <span class="string">&#x27;student_no.&#x27;</span>, </span><br><span class="line">       <span class="keyword">IFNULL</span>(s1.s_score,<span class="number">0</span>) <span class="string">&#x27;01&#x27;</span>,</span><br><span class="line">       <span class="keyword">IFNULL</span>(s2.s_score,<span class="number">0</span>) <span class="string">&#x27;02&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score s1, score s2</span><br><span class="line"><span class="keyword">WHERE</span> s1.c_id = <span class="string">&#x27;01&#x27;</span> </span><br><span class="line"><span class="keyword">and</span> s2.c_id = <span class="string">&#x27;02&#x27;</span> </span><br><span class="line"><span class="keyword">and</span> s1.s_id = s2.s_id </span><br><span class="line"><span class="keyword">and</span> (<span class="keyword">IFNULL</span>(s1.s_score,<span class="number">0</span>) &gt; <span class="keyword">IFNULL</span>(s2.s_score,<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<h4 id="2、查询平均成绩大于60分的学生的学号和平均成绩"><a href="#2、查询平均成绩大于60分的学生的学号和平均成绩" class="headerlink" title="2、查询平均成绩大于60分的学生的学号和平均成绩"></a>2、查询平均成绩大于60分的学生的学号和平均成绩</h4><h5 id="思路，group-by"><a href="#思路，group-by" class="headerlink" title="思路，group by"></a>思路，group by</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 注意，使用group by的时候，尽量不要把其他字段搞到select里，否则那列只会显示每个组里的第一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> s_id, <span class="keyword">avg</span>(<span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)) </span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">avg</span>(<span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>))&gt;<span class="number">60</span>;  </span><br><span class="line"><span class="comment">-- IFNULL,若第一个值不为NULL则返回第一个值，否则返回第二个值</span></span><br></pre></td></tr></table></figure>

<h4 id="3-查询所有学生的学号、姓名、选课数、总成绩（不重要）"><a href="#3-查询所有学生的学号、姓名、选课数、总成绩（不重要）" class="headerlink" title="3.查询所有学生的学号、姓名、选课数、总成绩（不重要）"></a>3.查询所有学生的学号、姓名、选课数、总成绩（不重要）</h4><h5 id="思路，group-by-表联结"><a href="#思路，group-by-表联结" class="headerlink" title="思路，group by + 表联结"></a>思路，group by + 表联结</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> s1.s_id,</span><br><span class="line">       s1.s_name, </span><br><span class="line">       <span class="keyword">IFNULL</span>(s2.number_of_class,<span class="number">0</span>),</span><br><span class="line">       <span class="keyword">IFNULL</span>(s2.scores,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">student s1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> </span><br><span class="line">(<span class="keyword">Select</span> s_id, </span><br><span class="line">        <span class="keyword">count</span>(<span class="keyword">distinct</span> c_id) <span class="string">&#x27;number_of_class&#x27;</span>,</span><br><span class="line">        <span class="keyword">sum</span>(s_score) <span class="string">&#x27;scores&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) s2 </span><br><span class="line"><span class="keyword">ON</span> s1.s_id = s2.s_id;</span><br></pre></td></tr></table></figure>

<h4 id="4-查询姓“猴”的老师的个数（不重要）"><a href="#4-查询姓“猴”的老师的个数（不重要）" class="headerlink" title="4.查询姓“猴”的老师的个数（不重要）"></a>4.查询姓“猴”的老师的个数（不重要）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> t_name)</span><br><span class="line"><span class="keyword">FROM</span> teacher</span><br><span class="line"><span class="keyword">WHERE</span> t_name <span class="keyword">like</span> <span class="string">&quot;猴%&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="5-查询没学过“张三”老师课的学生的学号、姓名（重点）"><a href="#5-查询没学过“张三”老师课的学生的学号、姓名（重点）" class="headerlink" title="5.查询没学过“张三”老师课的学生的学号、姓名（重点）"></a>5.查询没学过“张三”老师课的学生的学号、姓名（重点）</h4><h5 id="思路，先找到张三老师教什么课-然后对所有学生：只要学过的课in张三老师的课，case-when-1-最后统计结果为0的人"><a href="#思路，先找到张三老师教什么课-然后对所有学生：只要学过的课in张三老师的课，case-when-1-最后统计结果为0的人" class="headerlink" title="思路，先找到张三老师教什么课, 然后对所有学生：只要学过的课in张三老师的课，case when=1,最后统计结果为0的人"></a>思路，先找到张三老师教什么课, 然后对所有学生：只要学过的课in张三老师的课，case when=1,最后统计结果为0的人</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> temp.s_id, </span><br><span class="line">       temp.s_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> s2.s_id, </span><br><span class="line">        s2.s_name, </span><br><span class="line">        <span class="keyword">CASE</span> <span class="keyword">WHEN</span> c_id <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">SELECT</span> c.c_id</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(<span class="keyword">Select</span> t_id</span><br><span class="line"><span class="keyword">FROM</span> teacher</span><br><span class="line"><span class="keyword">WHERE</span> t_name = <span class="string">&#x27;张三&#x27;</span>) t1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c </span><br><span class="line"><span class="keyword">ON</span> t1.t_id = c.t_id) <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;flag&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score s1 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> student s2 </span><br><span class="line"><span class="keyword">ON</span> s1.s_id = s2.s_id) temp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> temp.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(temp.flag)=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h5 id="思路2，-找到学过张三老师课的同学，排除即为没学过的"><a href="#思路2，-找到学过张三老师课的同学，排除即为没学过的" class="headerlink" title="思路2， 找到学过张三老师课的同学，排除即为没学过的"></a>思路2， 找到学过张三老师课的同学，排除即为没学过的</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id, s_name</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">WHERE</span> s_id <span class="keyword">not</span> <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> c_id <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> c_id</span><br><span class="line"><span class="keyword">FROM</span> course c</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> teacher t</span><br><span class="line"><span class="keyword">WHERE</span> t_name = <span class="string">&#x27;张三&#x27;</span>) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="思路3，全联结后找到上张三课的人，再反选"><a href="#思路3，全联结后找到上张三课的人，再反选" class="headerlink" title="思路3，全联结后找到上张三课的人，再反选"></a>思路3，全联结后找到上张三课的人，再反选</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id, s_name</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="keyword">not</span> <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> s1.s_id</span><br><span class="line"><span class="keyword">FROM</span> student s1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score s2 <span class="keyword">ON</span> s1.s_id = s2.s_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> s2.c_id = c.c_id </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> teacher t <span class="keyword">on</span> c.t_id = t.t_id</span><br><span class="line"><span class="keyword">WHERE</span> t.t_name = <span class="string">&#x27;张三&#x27;</span>  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="6-查询学过“张三”老师所教的所有课的同学的学号、姓名（重点）"><a href="#6-查询学过“张三”老师所教的所有课的同学的学号、姓名（重点）" class="headerlink" title="6.查询学过“张三”老师所教的所有课的同学的学号、姓名（重点）"></a>6.查询学过“张三”老师所教的所有课的同学的学号、姓名（重点）</h4><h5 id="模仿上题思路1，上过一种课flag-1"><a href="#模仿上题思路1，上过一种课flag-1" class="headerlink" title="模仿上题思路1，上过一种课flag+1"></a>模仿上题思路1，上过一种课flag+1</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 本题需要考虑一个老师上多门课的情况</span></span><br><span class="line"><span class="keyword">SELECT</span> s_id, <span class="keyword">sum</span>(flag)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">case</span> <span class="keyword">when</span> c_id <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">SELECT</span> c.c_id</span><br><span class="line"> <span class="keyword">FROM</span> teacher t <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c </span><br><span class="line"> <span class="keyword">ON</span> c.t_id = t.t_id <span class="keyword">AND</span> t.t_name = <span class="string">&#x27;张三&#x27;</span>) <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> <span class="string">&#x27;flag&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score) temp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> temp.s_id</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">sum</span>(flag)= (<span class="keyword">SELECT</span> <span class="keyword">count</span>(*)</span><br><span class="line">                   <span class="keyword">FROM</span> teacher t <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> c.t_id = t.t_id <span class="keyword">AND</span> t.t_name = <span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="思路2，找出上过张三的课的人，按s-id分组，谁上的课的数量-张三教的课的数量，谁就入选。"><a href="#思路2，找出上过张三的课的人，按s-id分组，谁上的课的数量-张三教的课的数量，谁就入选。" class="headerlink" title="思路2，找出上过张三的课的人，按s_id分组，谁上的课的数量=张三教的课的数量，谁就入选。"></a>思路2，找出上过张三的课的人，按s_id分组，谁上的课的数量=张三教的课的数量，谁就入选。</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s1.s_id, s1.s_name</span><br><span class="line"><span class="keyword">FROM</span> student s1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score s2 <span class="keyword">ON</span> s1.s_id = s2.s_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> s2.c_id = c.c_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">join</span> teacher t <span class="keyword">ON</span> c.t_id = t.t_id</span><br><span class="line"><span class="keyword">WHERE</span> t.t_name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s1.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> s2.c_id) = (<span class="keyword">SELECT</span> <span class="keyword">count</span>(*)</span><br><span class="line">                                  <span class="keyword">FROM</span> teacher t <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> c.t_id = t.t_id <span class="keyword">AND</span> t.t_name = <span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
        <category>SQL经典50题</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql-经典50题(15-19)</title>
    <url>/2020/11/21/Sql-%E7%BB%8F%E5%85%B850%E9%A2%98(15-19)/</url>
    <content><![CDATA[<p>链接：<a href="https://www.bilibili.com/video/BV1q4411G7Lw?p=9">https://www.bilibili.com/video/BV1q4411G7Lw?p=9</a> </p>
<p><strong>17, 18题为重点题目!</strong></p>
<ol start="15">
<li>查询两科及其以上不及格课程的同学的学号，姓名及其平均成绩（重点）</li>
<li>检索”01”课程分数小于60，按分数降序排列的学生信息（和34题重复，不重点）</li>
<li><strong>按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</strong></li>
<li><strong>查询各科成绩最高分、最低分和平均分。以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</strong></li>
<li>按各科成绩进行排序，并显示排名(重点row_number)</li>
</ol>
<a id="more"></a>

<h4 id="15-查询两科及其以上不及格课程的同学的学号，姓名及其平均成绩（重点）"><a href="#15-查询两科及其以上不及格课程的同学的学号，姓名及其平均成绩（重点）" class="headerlink" title="15. 查询两科及其以上不及格课程的同学的学号，姓名及其平均成绩（重点）"></a>15. 查询两科及其以上不及格课程的同学的学号，姓名及其平均成绩（重点）</h4><h5 id="找到所有不及格的条目"><a href="#找到所有不及格的条目" class="headerlink" title="找到所有不及格的条目"></a>找到所有不及格的条目</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_id, st.s_name, <span class="keyword">avg</span>(b.s_score) average </span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>) s_score</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)&lt;<span class="number">60</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> c_id)&gt;=<span class="number">2</span></span><br><span class="line">)) b</span><br><span class="line"><span class="keyword">ON</span> st.s_id = b.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.s_id, st.s_name;                    </span><br><span class="line"><span class="comment">-- 注意不要让groupby以外的非聚合字段出现在select里</span></span><br></pre></td></tr></table></figure>

<h5 id="优化，省去第二层重新在score种搜s-id和s-score的步骤"><a href="#优化，省去第二层重新在score种搜s-id和s-score的步骤" class="headerlink" title="优化，省去第二层重新在score种搜s_id和s_score的步骤"></a>优化，省去第二层重新在score种搜s_id和s_score的步骤</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_id, st.s_name, <span class="keyword">avg</span>(<span class="keyword">IFNULL</span>(sc.s_score,<span class="number">0</span>)) average</span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> st.s_id = sc.s_id</span><br><span class="line"><span class="keyword">WHERE</span> st.s_id <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)&lt;<span class="number">60</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> c_id)&gt;=<span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> st.s_id, st.s_name;</span><br></pre></td></tr></table></figure>

<h4 id="16-检索”01”课程分数小于60，按分数降序排列的学生信息（和34题重复，不重点）"><a href="#16-检索”01”课程分数小于60，按分数降序排列的学生信息（和34题重复，不重点）" class="headerlink" title="16. 检索”01”课程分数小于60，按分数降序排列的学生信息（和34题重复，不重点）"></a>16. 检索”01”课程分数小于60，按分数降序排列的学生信息（和34题重复，不重点）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.*, sc.c_id, sc.s_score</span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">INNER</span> <span class="keyword">join</span> score sc <span class="keyword">ON</span> st.s_id = sc.s_id</span><br><span class="line"><span class="keyword">where</span> sc.c_id = <span class="string">&#x27;01&#x27;</span> <span class="keyword">AND</span> <span class="keyword">IFNULL</span>(sc.s_score,<span class="number">0</span>)&lt;<span class="number">60</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.s_score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h4 id="17-按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩（重点）"><a href="#17-按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩（重点）" class="headerlink" title="17.按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩（重点）"></a>17.按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩（重点）</h4><h5 id="先求出平均成绩-注意avg不会统计空值-让其作为左表"><a href="#先求出平均成绩-注意avg不会统计空值-让其作为左表" class="headerlink" title="先求出平均成绩, 注意avg不会统计空值,让其作为左表"></a>先求出平均成绩, 注意avg不会统计空值,让其作为左表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.s_id, <span class="keyword">IFNULL</span>(sc.s_score,<span class="number">0</span>) score, a.average</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">avg</span>(<span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)) average</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> average <span class="keyword">DESC</span>) a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> a.s_id = sc.s_id;</span><br></pre></td></tr></table></figure>

<h5 id="拓展，按学科显示各列-一个问题，选了没考的和没选的人都弄成null了"><a href="#拓展，按学科显示各列-一个问题，选了没考的和没选的人都弄成null了" class="headerlink" title="拓展，按学科显示各列, 一个问题，选了没考的和没选的人都弄成null了"></a>拓展，按学科显示各列, 一个问题，选了没考的和没选的人都弄成null了</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.s_id,</span><br><span class="line">       <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sc.c_id= <span class="string">&#x27;02&#x27;</span> <span class="keyword">THEN</span> sc.s_score <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>) <span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">	   <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sc.c_id= <span class="string">&#x27;01&#x27;</span> <span class="keyword">THEN</span> sc.s_score <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>) <span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line">	   <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sc.c_id= <span class="string">&#x27;03&#x27;</span> <span class="keyword">THEN</span> sc.s_score <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>) <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">       <span class="keyword">IFNULL</span>(sc.s_score,<span class="number">0</span>) score,</span><br><span class="line">       a.average</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">avg</span>(<span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)) average</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> average <span class="keyword">desc</span>) a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> a.s_id = sc.s_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.s_id;</span><br></pre></td></tr></table></figure>

<h5 id="情况2，记缺考为0分"><a href="#情况2，记缺考为0分" class="headerlink" title="情况2，记缺考为0分"></a>情况2，记缺考为0分</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.s_id,</span><br><span class="line">       <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sc.c_id= <span class="string">&#x27;02&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">ifnull</span>(sc.s_score,<span class="number">0</span>) <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>) <span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">	   <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sc.c_id= <span class="string">&#x27;01&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">ifnull</span>(sc.s_score,<span class="number">0</span>) <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>) <span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line">	   <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sc.c_id= <span class="string">&#x27;03&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">ifnull</span>(sc.s_score,<span class="number">0</span>) <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>) <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">       <span class="keyword">IFNULL</span>(sc.s_score,<span class="number">0</span>) score,</span><br><span class="line">       a.average</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">avg</span>(<span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)) average</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> average <span class="keyword">desc</span>) a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> a.s_id = sc.s_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.s_id;</span><br></pre></td></tr></table></figure>


<h4 id="18-查询各科成绩最高分、最低分和平均分。以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率"><a href="#18-查询各科成绩最高分、最低分和平均分。以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率" class="headerlink" title="18.查询各科成绩最高分、最低分和平均分。以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率"></a>18.查询各科成绩最高分、最低分和平均分。以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</h4><h5 id="与17题类似"><a href="#与17题类似" class="headerlink" title="与17题类似"></a>与17题类似</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.c_id, </span><br><span class="line">       <span class="keyword">MAX</span>(sc.s_score) top, </span><br><span class="line">       <span class="keyword">MIN</span>(sc.s_score) <span class="keyword">low</span>,</span><br><span class="line">       <span class="keyword">round</span>(<span class="keyword">AVG</span>(sc.s_score),<span class="number">2</span>) <span class="keyword">avg</span>,</span><br><span class="line">       <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>(<span class="number">100</span>*<span class="keyword">count</span>(<span class="keyword">IF</span>(sc.s_score&gt;<span class="number">60</span>,<span class="number">1</span>,<span class="literal">NULL</span>))/<span class="keyword">count</span>(sc.s_id),<span class="number">2</span>),<span class="string">&quot;%&quot;</span>) <span class="string">&quot;及格率&quot;</span>,</span><br><span class="line">       <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>(<span class="number">100</span>*<span class="keyword">count</span>(<span class="keyword">IF</span>(sc.s_score&gt;<span class="number">70</span> <span class="keyword">AND</span> sc.s_score&lt;=<span class="number">80</span>,<span class="number">1</span>,<span class="literal">NULL</span>))/<span class="keyword">count</span>(sc.s_id),<span class="number">2</span>),<span class="string">&quot;%&quot;</span>) <span class="string">&quot;中等率&quot;</span>,</span><br><span class="line">       <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>(<span class="number">100</span>*<span class="keyword">count</span>(<span class="keyword">IF</span>(sc.s_score&gt;<span class="number">80</span> <span class="keyword">AND</span> sc.s_score&lt;<span class="number">90</span>,<span class="number">1</span>,<span class="literal">NULL</span>))/<span class="keyword">count</span>(sc.s_id),<span class="number">2</span>),<span class="string">&quot;%&quot;</span>) <span class="string">&quot;优良率&quot;</span>,</span><br><span class="line">       <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>(<span class="number">100</span>*<span class="keyword">count</span>(<span class="keyword">IF</span>(sc.s_score&gt;<span class="number">90</span>,<span class="number">1</span>,<span class="literal">NULL</span>))/<span class="keyword">count</span>(sc.s_id),<span class="number">2</span>),<span class="string">&quot;%&quot;</span>) <span class="string">&quot;优秀率&quot;</span></span><br><span class="line"><span class="keyword">FROM</span> course c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> c.c_id = sc.c_id </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c.c_id;</span><br></pre></td></tr></table></figure>

<h1 id="19、按各科成绩进行排序，并显示排名-重点row-number"><a href="#19、按各科成绩进行排序，并显示排名-重点row-number" class="headerlink" title="19、按各科成绩进行排序，并显示排名(重点row_number)"></a>19、按各科成绩进行排序，并显示排名(重点row_number)</h1><h5 id="正常窗口函数，注意partition中有的字段就不要groupby再出现了。"><a href="#正常窗口函数，注意partition中有的字段就不要groupby再出现了。" class="headerlink" title="正常窗口函数，注意partition中有的字段就不要groupby再出现了。"></a>正常窗口函数，注意partition中有的字段就不要groupby再出现了。</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.c_name,</span><br><span class="line">	   sc.s_id,</span><br><span class="line">	   st.s_name,</span><br><span class="line">	   sc.s_score,</span><br><span class="line">       <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> sc.c_id <span class="keyword">order</span> <span class="keyword">by</span> s_score <span class="keyword">desc</span>) rnk</span><br><span class="line"><span class="keyword">FROM</span> score sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student st <span class="keyword">ON</span> sc.s_id = st.s_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.c_id = c.c_id;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
        <category>SQL经典50题</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql-经典50题(7-12)</title>
    <url>/2020/11/17/Sql-%E7%BB%8F%E5%85%B850%E9%A2%98(7-12)/</url>
    <content><![CDATA[<p>链接：<a href="https://www.bilibili.com/video/BV1q4411G7Lw?p=9">https://www.bilibili.com/video/BV1q4411G7Lw?p=9</a> </p>
<p>题目汇总：</p>
<ol start="7">
<li>查询学过编号为“01”的课程并且也学过编号为“02”的课程的学生的学号、姓名（重点）</li>
<li>查询课程编号为“02”的总成绩（不重点）</li>
<li>查询所有课程成绩小于60分的学生的学号、姓名（这里指的是选哪科哪科不及格，没选课的不算）</li>
<li>查询没有学全所有课的学生的学号、姓名(重点)</li>
<li>查询至少有一科与学号为“01”的学生所学课程相同的学生的学号和姓名（重点）</li>
<li>查询和“01”号同学所学课程完全相同的其他同学的学号(重点)</li>
</ol>
<a id="more"></a>

<h4 id="7-查询学过编号为“01”的课程并且也学过编号为“02”的课程的学生的学号、姓名（重点）"><a href="#7-查询学过编号为“01”的课程并且也学过编号为“02”的课程的学生的学号、姓名（重点）" class="headerlink" title="7. 查询学过编号为“01”的课程并且也学过编号为“02”的课程的学生的学号、姓名（重点）"></a>7. 查询学过编号为“01”的课程并且也学过编号为“02”的课程的学生的学号、姓名（重点）</h4><h5 id="思路1，常规思路，把学过01的人和学过02的人取交集"><a href="#思路1，常规思路，把学过01的人和学过02的人取交集" class="headerlink" title="思路1，常规思路，把学过01的人和学过02的人取交集"></a>思路1，常规思路，把学过01的人和学过02的人取交集</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id, s_name</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> a.s_id                         <span class="comment">-- 这句话别忘了，不要只join表不查东西</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> c_id = <span class="string">&#x27;01&#x27;</span>) a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> c_id = <span class="string">&#x27;02&#x27;</span>) b</span><br><span class="line"><span class="keyword">ON</span> a.s_id = b.s_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="思路2，找到学过01的人，在其中找学过02的人"><a href="#思路2，找到学过01的人，在其中找学过02的人" class="headerlink" title="思路2，找到学过01的人，在其中找学过02的人"></a>思路2，找到学过01的人，在其中找学过02的人</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s2.s_id, s2.s_name</span><br><span class="line"><span class="keyword">FROM</span> score s1 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> student s2 <span class="keyword">ON</span> s1.s_id = s2.s_id</span><br><span class="line"><span class="keyword">WHERE</span> s2.s_id <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> c_id = <span class="string">&quot;01&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> s1.c_id = <span class="string">&quot;02&quot;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="思路3，依然case-when"><a href="#思路3，依然case-when" class="headerlink" title="思路3，依然case when"></a>思路3，依然case when</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id, s_name</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c_id <span class="keyword">IN</span> (<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;02&#x27;</span>) <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)=<span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="8、查询课程编号为“02”的总成绩（不重点）"><a href="#8、查询课程编号为“02”的总成绩（不重点）" class="headerlink" title="8、查询课程编号为“02”的总成绩（不重点）"></a>8、查询课程编号为“02”的总成绩（不重点）</h4><h5 id="思路1，直接where，没什么难度"><a href="#思路1，直接where，没什么难度" class="headerlink" title="思路1，直接where，没什么难度"></a>思路1，直接where，没什么难度</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c_id, <span class="keyword">sum</span>(<span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)) <span class="string">&#x27;overall band&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> c_id = <span class="string">&#x27;02&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="思路2，group-by"><a href="#思路2，group-by" class="headerlink" title="思路2，group by"></a>思路2，group by</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c_id, <span class="keyword">SUM</span>(<span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)) <span class="string">&#x27;overall band&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line"><span class="keyword">HAVING</span> c_id=<span class="string">&#x27;02&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="9-查询所有课程成绩小于60分的学生的学号、姓名（这里指的是选哪科哪科不及格，没选课的不算）"><a href="#9-查询所有课程成绩小于60分的学生的学号、姓名（这里指的是选哪科哪科不及格，没选课的不算）" class="headerlink" title="9.查询所有课程成绩小于60分的学生的学号、姓名（这里指的是选哪科哪科不及格，没选课的不算）"></a>9.查询所有课程成绩小于60分的学生的学号、姓名（这里指的是选哪科哪科不及格，没选课的不算）</h4><h5 id="思路，找到至少一种课-gt-60分的人，排除他们即可"><a href="#思路，找到至少一种课-gt-60分的人，排除他们即可" class="headerlink" title="思路，找到至少一种课&gt;=60分的人，排除他们即可"></a>思路，找到至少一种课&gt;=60分的人，排除他们即可</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.s_id, b.s_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">distinct</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> s_score&gt;=<span class="number">60</span></span><br><span class="line">))a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> student b <span class="keyword">ON</span> a.s_id = b.s_id</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h5 id="思路2，case-when-if-count-不及格的课数等于选的课数"><a href="#思路2，case-when-if-count-不及格的课数等于选的课数" class="headerlink" title="思路2，case when/if/count, 不及格的课数等于选的课数"></a>思路2，case when/if/count, 不及格的课数等于选的课数</h5><h6 id="COUNT-找到小于60分的课和学生，count后为不及格的课数，与自己选过的课比较"><a href="#COUNT-找到小于60分的课和学生，count后为不及格的课数，与自己选过的课比较" class="headerlink" title="COUNT:找到小于60分的课和学生，count后为不及格的课数，与自己选过的课比较"></a>COUNT:找到小于60分的课和学生，count后为不及格的课数，与自己选过的课比较</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.s_id, s.s_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> a.s_id</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">count</span>(c_id) <span class="string">&#x27;cnt1&#x27;</span>             <span class="comment">-- 注意不能count(s_score),因为可能会存在缺考情况，s_score为null</span></span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)&lt;<span class="number">60</span>                   <span class="comment">-- 这地方的IFNULL要加，如果分数为null则记为0分</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">by</span> s_id) a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">count</span>(c_id) <span class="string">&#x27;cnt2&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) b</span><br><span class="line"><span class="keyword">ON</span> a.s_id = b.s_id <span class="keyword">AND</span> a.cnt1 = b.cnt2) c <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student s <span class="keyword">ON</span> c.s_id = s.s_id;</span><br></pre></td></tr></table></figure>

<h5 id="IF-原理基本同上"><a href="#IF-原理基本同上" class="headerlink" title="IF: 原理基本同上"></a>IF: 原理基本同上</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.s_id, s.s_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">SUM</span>(<span class="keyword">IF</span>(<span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)&lt;<span class="number">60</span>,<span class="number">1</span>,<span class="number">0</span>)) <span class="string">&#x27;cnt1&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id)a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">count</span>(c_id) <span class="string">&#x27;cnt2&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) b</span><br><span class="line"><span class="keyword">ON</span> a.s_id = b.s_id <span class="keyword">AND</span> a.cnt1 = b.cnt2 </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> student s <span class="keyword">ON</span> b.s_id = s.s_id;</span><br></pre></td></tr></table></figure>

<h5 id="CASE-WHEN-和IF一毛一样"><a href="#CASE-WHEN-和IF一毛一样" class="headerlink" title="CASE WHEN: 和IF一毛一样"></a>CASE WHEN: 和IF一毛一样</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.s_id, s.s_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>)&lt;<span class="number">60</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="string">&#x27;cnt1&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id)a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">count</span>(c_id) <span class="string">&#x27;cnt2&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) b</span><br><span class="line"><span class="keyword">ON</span> a.s_id = b.s_id <span class="keyword">AND</span> a.cnt1 = b.cnt2 </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> student s <span class="keyword">ON</span> b.s_id = s.s_id;</span><br></pre></td></tr></table></figure>

<h5 id="思路3，每个人最高分的课如果都小于60，则必符合条件"><a href="#思路3，每个人最高分的课如果都小于60，则必符合条件" class="headerlink" title="思路3，每个人最高分的课如果都小于60，则必符合条件"></a>思路3，每个人最高分的课如果都小于60，则必符合条件</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id, s_name</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MAX</span>(<span class="keyword">IFNULL</span>(s_score,<span class="number">0</span>))&lt;<span class="number">60</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="10-查询没有学全所有课的学生的学号、姓名-重点"><a href="#10-查询没有学全所有课的学生的学号、姓名-重点" class="headerlink" title="10.查询没有学全所有课的学生的学号、姓名(重点)"></a>10.查询没有学全所有课的学生的学号、姓名(重点)</h4><h5 id="思路1，找到每个学生学了多少节课，是否等于课程总数-再从student里排除"><a href="#思路1，找到每个学生学了多少节课，是否等于课程总数-再从student里排除" class="headerlink" title="思路1，找到每个学生学了多少节课，是否等于课程总数,再从student里排除"></a>思路1，找到每个学生学了多少节课，是否等于课程总数,再从student里排除</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id, s_name</span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c_id) = (<span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c_id) <span class="keyword">FROM</span> course)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="思路2，直接student作为左表，就能保留所有学生信息，没选课的地方会变成nulll"><a href="#思路2，直接student作为左表，就能保留所有学生信息，没选课的地方会变成nulll" class="headerlink" title="思路2，直接student作为左表，就能保留所有学生信息，没选课的地方会变成nulll"></a>思路2，直接student作为左表，就能保留所有学生信息，没选课的地方会变成nulll</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_id, st.s_name</span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> st.s_id = sc.s_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> st.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> sc.c_id) &lt; (<span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c_id) <span class="keyword">FROM</span> course);</span><br></pre></td></tr></table></figure>


<h4 id="11-查询至少有一科与学号为“01”的学生所学课程相同的学生的学号和姓名（重点）"><a href="#11-查询至少有一科与学号为“01”的学生所学课程相同的学生的学号和姓名（重点）" class="headerlink" title="11.查询至少有一科与学号为“01”的学生所学课程相同的学生的学号和姓名（重点）"></a>11.查询至少有一科与学号为“01”的学生所学课程相同的学生的学号和姓名（重点）</h4><h5 id="思路1，先找到01学生学的课，和第5题类似，注意不包含01-s-id-‘01’"><a href="#思路1，先找到01学生学的课，和第5题类似，注意不包含01-s-id-‘01’" class="headerlink" title="思路1，先找到01学生学的课，和第5题类似，注意不包含01(s_id != ‘01’)"></a>思路1，先找到01学生学的课，和第5题类似，注意不包含01(s_id != ‘01’)</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.s_id, a.s_name</span><br><span class="line"><span class="keyword">FROM</span> student a <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">distinct</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score </span><br><span class="line"><span class="keyword">WHERE</span> c_id <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> c_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> s_id = <span class="string">&#x27;01&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> s_id != <span class="string">&#x27;01&#x27;</span>) b <span class="keyword">ON</span> a.s_id = b.s_id;</span><br></pre></td></tr></table></figure>

<h5 id="拓展，查找只有两科与学号为“01”的学生所学课程相同的学生的学号和姓名"><a href="#拓展，查找只有两科与学号为“01”的学生所学课程相同的学生的学号和姓名" class="headerlink" title="拓展，查找只有两科与学号为“01”的学生所学课程相同的学生的学号和姓名"></a>拓展，查找只有两科与学号为“01”的学生所学课程相同的学生的学号和姓名</h5><h5 id="CASE-WHEN"><a href="#CASE-WHEN" class="headerlink" title="CASE WHEN"></a>CASE WHEN</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_id, st.s_name</span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">(<span class="keyword">SELECT</span> a.s_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> c_id <span class="keyword">in</span> (<span class="keyword">SELECT</span> <span class="keyword">distinct</span> c_id</span><br><span class="line">                                <span class="keyword">FROM</span> score</span><br><span class="line">                                <span class="keyword">WHERE</span> s_id = <span class="string">&#x27;01&#x27;</span>) <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;subjects&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score) a</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">sum</span>(a.subjects)=<span class="number">2</span>) b <span class="keyword">ON</span> st.s_id = b.s_id;</span><br></pre></td></tr></table></figure>

<h4 id="12-查询和“01”号同学所学课程完全相同的其他同学的学号-重点"><a href="#12-查询和“01”号同学所学课程完全相同的其他同学的学号-重点" class="headerlink" title="12.查询和“01”号同学所学课程完全相同的其他同学的学号(重点)"></a>12.查询和“01”号同学所学课程完全相同的其他同学的学号(重点)</h4><h5 id="思路1，和第6题一样，找出上过01同学课程的人，groupby后数科目"><a href="#思路1，和第6题一样，找出上过01同学课程的人，groupby后数科目" class="headerlink" title="思路1，和第6题一样，找出上过01同学课程的人，groupby后数科目"></a>思路1，和第6题一样，找出上过01同学课程的人，groupby后数科目</h5><h5 id="错误，原因：如果02选择了abcd，01选择了abc，依据下面逻辑，02也会被选出来"><a href="#错误，原因：如果02选择了abcd，01选择了abc，依据下面逻辑，02也会被选出来" class="headerlink" title="错误，原因：如果02选择了abcd，01选择了abc，依据下面逻辑，02也会被选出来"></a>错误，原因：如果02选择了abcd，01选择了abc，依据下面逻辑，02也会被选出来</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_id, st.s_name</span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id, c_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> c_id <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> c_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> s_id = <span class="string">&#x27;01&#x27;</span></span><br><span class="line">)) a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.s_id </span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> a.c_id) = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> c_id)</span><br><span class="line">                               <span class="keyword">FROM</span> score</span><br><span class="line">                               <span class="keyword">WHERE</span> s_id = <span class="string">&#x27;01&#x27;</span>)</span><br><span class="line">) b <span class="keyword">ON</span> st.s_id = b.s_id;</span><br></pre></td></tr></table></figure>

<h5 id="改进，先筛出和01选课数相同的人，多选的人剔除"><a href="#改进，先筛出和01选课数相同的人，多选的人剔除" class="headerlink" title="改进，先筛出和01选课数相同的人，多选的人剔除"></a>改进，先筛出和01选课数相同的人，多选的人剔除</h5><h5 id="剔除和01选课有不同的人-剩下的人选的课要么和01相同，要么包含于01的课-然后判断数量"><a href="#剔除和01选课有不同的人-剩下的人选的课要么和01相同，要么包含于01的课-然后判断数量" class="headerlink" title="剔除和01选课有不同的人,剩下的人选的课要么和01相同，要么包含于01的课,然后判断数量"></a>剔除和01选课有不同的人,剩下的人选的课要么和01相同，要么包含于01的课,然后判断数量</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  st.s_id, st.s_name</span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">(<span class="keyword">SELECT</span> s_id,c_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> c_id <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> c_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> s_id = <span class="string">&#x27;01&#x27;</span>)</span><br><span class="line">) <span class="keyword">AND</span> s_id != <span class="string">&#x27;01&#x27;</span>) a <span class="keyword">ON</span> st.s_id = a.s_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> a.c_id)  = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> c_id)</span><br><span class="line">                                  <span class="keyword">FROM</span> score</span><br><span class="line">                                  <span class="keyword">WHERE</span> s_id = <span class="string">&#x27;01&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
        <category>SQL经典50题</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql-经典50题(重点题)</title>
    <url>/2020/11/23/Sql-%E7%BB%8F%E5%85%B850%E9%A2%98(%E9%87%8D%E7%82%B9%E9%A2%98)/</url>
    <content><![CDATA[<p>本文主要涵盖了SQL经典50题中个人认为比较有技巧的几题。</p>
<a id="more"></a>

<h4 id="23、使用分段-100-85-85-70-70-60-lt-60-来统计各科成绩，分别统计各分数段人数：课程ID和课程名称-重点和18题类似"><a href="#23、使用分段-100-85-85-70-70-60-lt-60-来统计各科成绩，分别统计各分数段人数：课程ID和课程名称-重点和18题类似" class="headerlink" title="23、使用分段[100-85],[85-70],[70-60],[&lt;60]来统计各科成绩，分别统计各分数段人数：课程ID和课程名称(重点和18题类似)"></a>23、使用分段[100-85],[85-70],[70-60],[&lt;60]来统计各科成绩，分别统计各分数段人数：课程ID和课程名称(重点和18题类似)</h4><h5 id="思路1，一步到位"><a href="#思路1，一步到位" class="headerlink" title="思路1，一步到位"></a>思路1，一步到位</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.c_id, c.c_name, </span><br><span class="line">       <span class="keyword">count</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">between</span> <span class="number">85</span> <span class="keyword">and</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>) <span class="string">&quot;[100-85]&quot;</span>,</span><br><span class="line">       <span class="keyword">count</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">between</span> <span class="number">70</span> <span class="keyword">and</span> <span class="number">85</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>) <span class="string">&quot;[85-70]&quot;</span>,</span><br><span class="line">       <span class="keyword">count</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">between</span> <span class="number">60</span> <span class="keyword">and</span> <span class="number">70</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>) <span class="string">&quot;[70-60]&quot;</span>,</span><br><span class="line">       <span class="keyword">count</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score &lt;<span class="number">60</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>) <span class="string">&quot;[&lt;60]&quot;</span></span><br><span class="line"><span class="keyword">FROM</span> score sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.c_id = c.c_id </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.c_id;</span><br></pre></td></tr></table></figure>

<h5 id="思路2，case-when做中间值，表结构会发生改变"><a href="#思路2，case-when做中间值，表结构会发生改变" class="headerlink" title="思路2，case when做中间值，表结构会发生改变"></a>思路2，case when做中间值，表结构会发生改变</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.c_id, c.c_name, t.category, <span class="keyword">count</span>(t.s_id)</span><br><span class="line"><span class="keyword">FROM</span> course c <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> c_id, s_score, s_id,</span><br><span class="line">       <span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score&gt;=<span class="number">85</span> <span class="keyword">AND</span> s_score&lt;=<span class="number">100</span> <span class="keyword">THEN</span> <span class="string">&quot;[100-85]&quot;</span></span><br><span class="line">       <span class="keyword">WHEN</span> s_score&gt;=<span class="number">70</span> <span class="keyword">AND</span> s_score&lt;=<span class="number">85</span> <span class="keyword">THEN</span> <span class="string">&quot;[85-70]&quot;</span></span><br><span class="line">       <span class="keyword">WHEN</span> s_score&gt;=<span class="number">60</span> <span class="keyword">AND</span> s_score&lt;=<span class="number">70</span> <span class="keyword">THEN</span> <span class="string">&quot;[60-70]&quot;</span></span><br><span class="line">       <span class="keyword">ELSE</span> <span class="string">&quot;[&lt;60]&quot;</span> <span class="keyword">END</span> <span class="keyword">as</span> <span class="keyword">category</span></span><br><span class="line"><span class="keyword">FROM</span> score) t <span class="keyword">ON</span> c.c_id = t.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t.c_id, c.c_name, t.category</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c.c_id;</span><br></pre></td></tr></table></figure>

<h4 id="35、查询所有学生的课程及分数情况（重点）"><a href="#35、查询所有学生的课程及分数情况（重点）" class="headerlink" title="35、查询所有学生的课程及分数情况（重点）"></a>35、查询所有学生的课程及分数情况（重点）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_id, st.s_name,</span><br><span class="line">       <span class="keyword">IFNULL</span>(<span class="keyword">max</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c_id = <span class="string">&#x27;01&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">IFNULL</span>(s_score,<span class="string">&quot;缺考&quot;</span>) <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>),<span class="string">&quot;未选&quot;</span>) <span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line">       <span class="keyword">IFNULL</span>(<span class="keyword">max</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c_id = <span class="string">&#x27;02&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">IFNULL</span>(s_score,<span class="string">&quot;缺考&quot;</span>) <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>),<span class="string">&quot;未选&quot;</span>) <span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">       <span class="keyword">IFNULL</span>(<span class="keyword">max</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c_id = <span class="string">&#x27;03&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">IFNULL</span>(s_score,<span class="string">&quot;缺考&quot;</span>) <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>),<span class="string">&quot;未选&quot;</span>) <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">       <span class="keyword">IFNULL</span>(<span class="keyword">max</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c_id = <span class="string">&#x27;04&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">IFNULL</span>(s_score,<span class="string">&quot;缺考&quot;</span>) <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>),<span class="string">&quot;未选&quot;</span>) <span class="string">&#x27;计算机&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> st.s_id = sc.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.s_id;</span><br></pre></td></tr></table></figure>

<h4 id="40、查询选修“张数计”老师所授课程的学生中成绩最高的学生姓名及其成绩（重要）"><a href="#40、查询选修“张数计”老师所授课程的学生中成绩最高的学生姓名及其成绩（重要）" class="headerlink" title="40、查询选修“张数计”老师所授课程的学生中成绩最高的学生姓名及其成绩（重要）"></a>40、查询选修“张数计”老师所授课程的学生中成绩最高的学生姓名及其成绩（重要）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> temp.c_name, temp.s_name, temp.s_score</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> c.c_name, st.s_name, sc.s_score, <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> c.c_id <span class="keyword">order</span> <span class="keyword">by</span> sc.s_score <span class="keyword">desc</span>) rnk</span><br><span class="line"><span class="keyword">FROM</span> teacher t <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">on</span> t.t_id = c.t_id <span class="keyword">INNER</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> c.c_id = sc.c_id <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student st <span class="keyword">ON</span> sc.s_id = st.s_id</span><br><span class="line"><span class="keyword">WHERE</span> t.t_name = <span class="string">&#x27;张数计&#x27;</span>) temp</span><br><span class="line"><span class="keyword">WHERE</span> temp.rnk = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h4 id="41-查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩"><a href="#41-查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩" class="headerlink" title="41.查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩"></a>41.查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</h4><h5 id="不会-✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳，一种非常重要的去重方式"><a href="#不会-✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳，一种非常重要的去重方式" class="headerlink" title="不会 ✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳，一种非常重要的去重方式"></a>不会 ✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳，一种非常重要的去重方式</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc1.s_id, sc1.c_id, sc2.s_id, sc2.c_id</span><br><span class="line"><span class="keyword">FROM</span> score sc1, score sc2</span><br><span class="line"><span class="keyword">WHERE</span> sc1.s_score = sc2.s_score <span class="keyword">AND</span> sc1.s_id != sc2.s_id <span class="keyword">AND</span> sc1.c_id != sc2.c_id;</span><br></pre></td></tr></table></figure>

<h5 id="和互相关注的人那道题特别像"><a href="#和互相关注的人那道题特别像" class="headerlink" title="和互相关注的人那道题特别像"></a>和互相关注的人那道题特别像</h5><h5 id="还一种理解是学的课程分数都相同的同学。思路：max-min"><a href="#还一种理解是学的课程分数都相同的同学。思路：max-min" class="headerlink" title="还一种理解是学的课程分数都相同的同学。思路：max = min"></a>还一种理解是学的课程分数都相同的同学。思路：max = min</h5><h5 id="思路，groupby后只有一条记录"><a href="#思路，groupby后只有一条记录" class="headerlink" title="思路，groupby后只有一条记录"></a>思路，groupby后只有一条记录</h5>]]></content>
      <categories>
        <category>SQL</category>
        <category>SQL经典50题</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>SKlearn的pipeline机制</title>
    <url>/2020/10/20/sklearn%E7%9A%84pipeline%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>基本上所有评估其和转换器都有三个方法，fit,transform,和fit_transform。而在pipeline中，它的最后一部分为评估器，<strong>也就是说最后一步一定是个分类器</strong>，而前面的预处理、降维、正则化等都是转换器。</p>
<a id="more"></a>

<h2 id="2-pipeline的作用"><a href="#2-pipeline的作用" class="headerlink" title="2.pipeline的作用"></a>2.pipeline的作用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> pipeline</span><br></pre></td></tr></table></figure>

<p>管道机制在机器学习算法中得以应用的根源在于，参数集在新数据集（比如测试集）上的<strong>重复使用</strong>。</p>
<p>管道机制实现了对全部步骤的流式化封装和管理（<strong>streaming workflows with pipelines</strong>）。</p>
<p>当然，这里用的都是包里自带的评估器与分类器，如果想自己写其中的一个过程然后添加到整个pipeline中，还需要继承基类后才能添加进去。</p>
<h2 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h2><p><strong>1.加载数据集</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;https://archive.ics.uci.edu/ml/machine-learning-databases/&#x27;</span></span><br><span class="line">                 <span class="string">&#x27;breast-cancer-wisconsin/wdbc.data&#x27;</span>, header=<span class="literal">None</span>)</span><br><span class="line">                                 <span class="comment"># Breast Cancer Wisconsin dataset</span></span><br><span class="line"></span><br><span class="line">X, y = df.values[:, <span class="number">2</span>:], df.values[:, <span class="number">1</span>]</span><br><span class="line">                                <span class="comment"># y为字符型标签</span></span><br><span class="line">                                <span class="comment"># 使用LabelEncoder类将其转换为0开始的数值型</span></span><br><span class="line">encoder = LabelEncoder()</span><br><span class="line">y = encoder.fit_transform(y)</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">.2</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2.构建pipeline的流程</strong></p>
<p>可放在Pipeline中的步骤可能有：</p>
<ul>
<li>特征标准化是需要的，可作为第一个环节</li>
<li>既然是分类器，classifier也是少不了的，自然是最后一个环节</li>
<li>中间可加上比如数据降维（PCA）</li>
<li>。。。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"></span><br><span class="line">pipe_lr = Pipeline([(<span class="string">&#x27;sc&#x27;</span>, StandardScaler()),</span><br><span class="line">                    (<span class="string">&#x27;pca&#x27;</span>, PCA(n_components=<span class="number">2</span>)),</span><br><span class="line">                    (<span class="string">&#x27;clf&#x27;</span>, LogisticRegression(random_state=<span class="number">1</span>))</span><br><span class="line">                    ])</span><br><span class="line">pipe_lr.fit(X_train, y_train)</span><br><span class="line">print(<span class="string">&#x27;Test accuracy: %.3f&#x27;</span> % pipe_lr.score(X_test, y_test))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Test accuracy: 0.947</span></span><br></pre></td></tr></table></figure>

<p>Pipeline对象接受<strong>二元tuple构成的list</strong>，每一个二元 tuple 中的第一个元素为 arbitrary <strong>identifier string</strong>，我们用以获取（access）Pipeline object 中的 individual elements，二元 tuple 中的第二个元素是 scikit-learn与之相适配的<strong>transformer 或者 estimator。</strong></p>
<p><strong>3.Pipeline执行流程的分析</strong></p>
<p>Pipeline 的中间过程由scikit-learn相适配的转换器（transformer）构成，最后一步是一个estimator。比如上述的代码，<em>StandardScaler</em>和<em>PCA</em> <strong>transformer</strong> 构成intermediate steps，LogisticRegression 作为最终的<strong>estimator</strong>。</p>
<p>当我们执行 <code>pipe_lr.fit(X_train, y_train)</code>时，首先由<em>StandardScaler</em>在训练集上执行 <em>fit</em>和<em>transform</em>方法，transformed后的数据又被传递给Pipeline对象的下一步，也即PCA()。和<em>StandardScaler</em>一样，PCA也是执行fit和transform方法，最终将转换后的数据传递给 <em>LosigsticRegression</em>。</p>
<p>参考：<a href="https://blog.csdn.net/lanchunhui/article/details/50521648">https://blog.csdn.net/lanchunhui/article/details/50521648</a></p>
<h3 id="4-fit与transform"><a href="#4-fit与transform" class="headerlink" title="4. fit与transform"></a>4. fit与transform</h3><p>To <a href="https://en.wikipedia.org/wiki/Standard_score">center the data</a> (make it have zero mean and unit standard error), you subtract the mean and then divide the result by the standard deviation:<br>$$<br>x’ = \frac{x-μ}{σ}<br>$$<br>You do that on the training set of data. But then you have to apply the same transformation to your testing set (e.g. in cross-validation), or to newly obtained examples before forecast. But you have to use the exact same two parameters μand σσ(values) that you used for centering the training set.</p>
<p>Hence, every sklearn’s transform’s <code>fit()</code> <strong>just calculates the parameters (e.g. μ and σ in case of <a href="http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html">StandardScaler</a>) and saves them as an internal object’s state</strong>. Afterwards, you can call its <code>transform()</code> method to <strong>apply the transformation to any particular set of examples</strong>.</p>
<p><code>fit_transform()</code> joins these two steps and is used for the initial fitting of parameters on the training set xx, while also returning the transformed x′x′. Internally, the transformer object just <a href="https://github.com/scikit-learn/scikit-learn/blob/6c3e17989a7d80c34f124365f2c436a3fdcb1497/sklearn/base.py#L659-L690">calls first <code>fit()</code> and then <code>transform()</code></a> on the same data.</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>SKlearn</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql-几种中位数求法</title>
    <url>/2020/12/01/sql-%E5%87%A0%E7%A7%8D%E4%B8%AD%E4%BD%8D%E6%95%B0%E6%B1%82%E6%B3%95/</url>
    <content><![CDATA[<p>本文记录了牛客和leetcode上面几道求中位数的题目，其中比较核心的思路是中位数的排序&gt;=总数/2并且&lt;=总数/2+1。</p>
<a id="more"></a>

<h4 id="1-牛客网-考试分数"><a href="#1-牛客网-考试分数" class="headerlink" title="1.牛客网-考试分数"></a>1.牛客网-考试分数</h4><p>链接：</p>
<p><a href="https://www.nowcoder.com/practice/b626ff9e2ad04789954c2132c74c0512?tpId=82&amp;&amp;tqId=35496&amp;rp=1&amp;ru=/ta/sql&amp;qru=/ta/sql/question-ranking">https://www.nowcoder.com/practice/b626ff9e2ad04789954c2132c74c0512?tpId=82&amp;&amp;tqId=35496&amp;rp=1&amp;ru=/ta/sql&amp;qru=/ta/sql/question-ranking</a></p>
<h5 id="解法1：利用表联结"><a href="#解法1：利用表联结" class="headerlink" title="解法1：利用表联结"></a>解法1：利用表联结</h5><p>思路：中位数的排序&gt;=总数/2并且&lt;=总数/2+1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.id, a.job, a.score, a.rnk</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> *, row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> job <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) rnk</span><br><span class="line"><span class="keyword">FROM</span> grade) a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> job, <span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> grade</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job) b</span><br><span class="line"><span class="keyword">ON</span> a.job = b.job</span><br><span class="line"><span class="keyword">WHERE</span> a.rnk&gt;=b.num/<span class="number">2</span> <span class="keyword">AND</span> a.rnk&lt;=b.num/<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.id;</span><br></pre></td></tr></table></figure>

<h5 id="解法2：分别正序、倒序排列（最常用）"><a href="#解法2：分别正序、倒序排列（最常用）" class="headerlink" title="解法2：分别正序、倒序排列（最常用）"></a>解法2：分别正序、倒序排列（最常用）</h5><p>思路：若排序总数为奇数，则中位数的正序位置与倒序位置相等，若排序总数为偶数，则中位数的正序位置与倒序位置正好差1。</p>
<h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><p>如果不加cast(字段 as signed)，则会报错：</p>
<ul>
<li>BIGINT UNSIGNED value is out of range</li>
</ul>
<p><strong>原因：</strong>mysql 当两个字段想减时，如果其中一个或两个字段的类型的unsigned无签名类型，如果想减的值小于0则会报错。</p>
<p><strong>解决方案：</strong></p>
<p>一、修改字段类型</p>
<p>二、使用cast函数转字段为signed类型：select cast(1 as signed)-2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.id, t.job, t.score, t.inv_rnk </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> *,</span><br><span class="line">       row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> job <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">asc</span>) rnk,</span><br><span class="line">       row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> job <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) inv_rnk</span><br><span class="line"><span class="keyword">FROM</span> grade) t</span><br><span class="line"><span class="keyword">WHERE</span> t.rnk = t.inv_rnk <span class="keyword">OR</span> <span class="keyword">abs</span>(<span class="keyword">cast</span>(t.rnk <span class="keyword">as</span> signed) - <span class="keyword">cast</span>(t.inv_rnk <span class="keyword">as</span> signed))=<span class="number">1</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t.id;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
        <category>SQL经典50题</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql-经典50题(20-50)</title>
    <url>/2020/11/22/sql-%E7%BB%8F%E5%85%B850%E9%A2%98(20-50)/</url>
    <content><![CDATA[<p>B站链接：<a href="https://www.bilibili.com/video/BV1q4411G7Lw?p=9">https://www.bilibili.com/video/BV1q4411G7Lw?p=9</a> </p>
<p>本篇文章不包含23，35，40，41题，在”Sql-经典50题(重点题)”中单独分析，文章链接在下面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.sqlcat.cn/2020/11/23/Sql-%E7%BB%8F%E5%85%B850%E9%A2%98(%E9%87%8D%E7%82%B9%E9%A2%98)/</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="20、查询学生的总成绩并进行排名（不重点）"><a href="#20、查询学生的总成绩并进行排名（不重点）" class="headerlink" title="20、查询学生的总成绩并进行排名（不重点）"></a>20、查询学生的总成绩并进行排名（不重点）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 窗口函数的partition by可以不加，但是order by一定要加。 窗口函数不会像groupby一样，结果被聚合统计，而是会返回相同的条目数。</span></span><br><span class="line"><span class="keyword">SELECT</span> sc.s_id, st.s_name, <span class="keyword">sum</span>(sc.s_score) score, <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sum</span>(sc.s_score) <span class="keyword">desc</span>) rnk</span><br><span class="line"><span class="keyword">FROM</span> score sc <span class="keyword">inner</span> <span class="keyword">join</span> student st <span class="keyword">ON</span> sc.s_id = st.s_id</span><br><span class="line"><span class="keyword">where</span> sc.c_id != <span class="string">&#x27;04&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_id;</span><br></pre></td></tr></table></figure>

<h4 id="21、查询不同老师所教不同课程平均分从高到低显示-不重点"><a href="#21、查询不同老师所教不同课程平均分从高到低显示-不重点" class="headerlink" title="21、查询不同老师所教不同课程平均分从高到低显示(不重点)"></a>21、查询不同老师所教不同课程平均分从高到低显示(不重点)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.t_name, c.c_name, <span class="keyword">avg</span>(sc.s_score) average</span><br><span class="line"><span class="keyword">FROM</span> teacher t <span class="keyword">left</span> <span class="keyword">join</span> course c <span class="keyword">on</span> t.t_id = c.t_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> c.c_id = sc.c_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c.c_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> average <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<h4 id="22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩（重要-25类似）"><a href="#22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩（重要-25类似）" class="headerlink" title="22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩（重要 25类似）"></a>22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩（重要 25类似）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.*, t.c_id, t.s_score, t.rnk</span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">SELECT</span> c_id, s_id, s_score, <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> c_id <span class="keyword">order</span> <span class="keyword">by</span> s_score <span class="keyword">desc</span>) rnk</span><br><span class="line"><span class="keyword">FROM</span> score) t <span class="keyword">ON</span> st.s_id = t.s_id</span><br><span class="line"><span class="keyword">WHERE</span> t.rnk <span class="keyword">between</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h4 id="24、查询学生平均成绩及其名次（同19题，重点）"><a href="#24、查询学生平均成绩及其名次（同19题，重点）" class="headerlink" title="24、查询学生平均成绩及其名次（同19题，重点）"></a>24、查询学生平均成绩及其名次（同19题，重点）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.s_id, st.s_name, <span class="keyword">avg</span>(sc.s_score), <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span>(sc.s_score) <span class="keyword">desc</span>) rnk</span><br><span class="line"><span class="keyword">FROM</span> score sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student st <span class="keyword">ON</span> sc.s_id = st.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.s_id;</span><br></pre></td></tr></table></figure>

<h4 id="25、查询各科成绩前三名的记录（不考虑成绩并列情况）（重点-与22题类似）"><a href="#25、查询各科成绩前三名的记录（不考虑成绩并列情况）（重点-与22题类似）" class="headerlink" title="25、查询各科成绩前三名的记录（不考虑成绩并列情况）（重点 与22题类似）"></a>25、查询各科成绩前三名的记录（不考虑成绩并列情况）（重点 与22题类似）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.c_id, t.s_id, t.s_score, t.rnk</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> *, row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> c_id <span class="keyword">order</span> <span class="keyword">by</span> s_score <span class="keyword">desc</span>) rnk</span><br><span class="line"><span class="keyword">FROM</span> score) t</span><br><span class="line"><span class="keyword">WHERE</span> t.rnk&lt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h4 id="26、查询每科被选修的学生数-不重点"><a href="#26、查询每科被选修的学生数-不重点" class="headerlink" title="26、查询每科被选修的学生数(不重点)"></a>26、查询每科被选修的学生数(不重点)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.c_id, c.c_name, <span class="keyword">count</span>(<span class="keyword">distinct</span> sc.s_id) members</span><br><span class="line"><span class="keyword">FROM</span> course c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> c.c_id = sc.c_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.c_id;</span><br></pre></td></tr></table></figure>

<h4 id="27、查询出只有两种课程的全部学生的学号和姓名-不重点"><a href="#27、查询出只有两种课程的全部学生的学号和姓名-不重点" class="headerlink" title="27、查询出只有两种课程的全部学生的学号和姓名(不重点)"></a>27、查询出只有两种课程的全部学生的学号和姓名(不重点)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_id, st.s_name</span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">left</span> <span class="keyword">join</span> score sc <span class="keyword">on</span> st.s_id = sc.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> sc.c_id)=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h4 id="28、查询男生、女生人数-不重点"><a href="#28、查询男生、女生人数-不重点" class="headerlink" title="28、查询男生、女生人数(不重点)"></a>28、查询男生、女生人数(不重点)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_sex, <span class="keyword">count</span>(<span class="keyword">distinct</span> s_id) numbers</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_sex;</span><br></pre></td></tr></table></figure>

<h4 id="29、查询名字中含有”风”字的学生信息（不重点）"><a href="#29、查询名字中含有”风”字的学生信息（不重点）" class="headerlink" title="29、查询名字中含有”风”字的学生信息（不重点）"></a>29、查询名字中含有”风”字的学生信息（不重点）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> s_name <span class="keyword">like</span> <span class="string">&quot;%风%&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="31、查询1990年出生的学生名单"><a href="#31、查询1990年出生的学生名单" class="headerlink" title="31、查询1990年出生的学生名单"></a>31、查询1990年出生的学生名单</h4><h5 id="year"><a href="#year" class="headerlink" title="year"></a>year</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">year</span>(s_birth) = <span class="number">1990</span>;</span><br></pre></td></tr></table></figure>

<h5 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SUBSTR</span>(s_birth,<span class="number">1</span>,<span class="number">4</span>) = <span class="string">&#x27;1990&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="32、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩（不重要）"><a href="#32、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩（不重要）" class="headerlink" title="32、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩（不重要）"></a>32、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩（不重要）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.s_id, st.s_name, <span class="keyword">avg</span>(sc.s_score) average</span><br><span class="line"><span class="keyword">FROM</span> score sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student st <span class="keyword">ON</span> sc.s_id = st.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">avg</span>(sc.s_score)&gt;=<span class="number">85</span>;</span><br></pre></td></tr></table></figure>

<h4 id="33、查询每科的平均成绩，结果按平均成绩升序排序，平均成绩相同时，按课程号降序排列（不重要）"><a href="#33、查询每科的平均成绩，结果按平均成绩升序排序，平均成绩相同时，按课程号降序排列（不重要）" class="headerlink" title="33、查询每科的平均成绩，结果按平均成绩升序排序，平均成绩相同时，按课程号降序排列（不重要）"></a>33、查询每科的平均成绩，结果按平均成绩升序排序，平均成绩相同时，按课程号降序排列（不重要）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c_id, <span class="keyword">avg</span>(s_score) average</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> average <span class="keyword">asc</span>, c_id <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<h4 id="34、查询课程名称为”数学”，且分数低于60的学生姓名和分数-不重点"><a href="#34、查询课程名称为”数学”，且分数低于60的学生姓名和分数-不重点" class="headerlink" title="34、查询课程名称为”数学”，且分数低于60的学生姓名和分数 (不重点)"></a>34、查询课程名称为”数学”，且分数低于60的学生姓名和分数 (不重点)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_name, sc.s_score</span><br><span class="line"><span class="keyword">FROM</span> score sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.c_id = c.c_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> student st <span class="keyword">ON</span> sc.s_id = st.s_id</span><br><span class="line"><span class="keyword">WHERE</span> c.c_name = <span class="string">&quot;数学&quot;</span> <span class="keyword">AND</span> sc.s_score&lt;<span class="number">60</span>;</span><br></pre></td></tr></table></figure>

<h4 id="36、查询任何一科成绩在70分以上的姓名、课程名称和分数（重点）"><a href="#36、查询任何一科成绩在70分以上的姓名、课程名称和分数（重点）" class="headerlink" title="36、查询任何一科成绩在70分以上的姓名、课程名称和分数（重点）"></a>36、查询任何一科成绩在70分以上的姓名、课程名称和分数（重点）</h4><h5 id="CASE-WHEN-麻烦一些"><a href="#CASE-WHEN-麻烦一些" class="headerlink" title="CASE WHEN(麻烦一些)"></a>CASE WHEN(麻烦一些)</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_name, c.c_name, t.s_score</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> s_id, c_id, s_score, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score&gt;<span class="number">70</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> <span class="string">&#x27;flag&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> score) t <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student st <span class="keyword">ON</span> t.s_id = st.s_id <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">on</span> t.c_id = c.c_id</span><br><span class="line"><span class="keyword">WHERE</span> t.flag =<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h5 id="直接JOIN再筛选"><a href="#直接JOIN再筛选" class="headerlink" title="直接JOIN再筛选"></a>直接JOIN再筛选</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_name, c.c_name, sc.s_score</span><br><span class="line"><span class="keyword">FROM</span> score sc <span class="keyword">inner</span> <span class="keyword">join</span> student st <span class="keyword">ON</span> sc.s_id = st.s_id <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> c.c_id = sc.c_id</span><br><span class="line"><span class="keyword">WHERE</span> sc.s_score&gt;<span class="number">70</span>;</span><br></pre></td></tr></table></figure>

<h4 id="37、查询不及格的学生及课程并按课程号从大到小排列-不重点"><a href="#37、查询不及格的学生及课程并按课程号从大到小排列-不重点" class="headerlink" title="37、查询不及格的学生及课程并按课程号从大到小排列(不重点)"></a>37、查询不及格的学生及课程并按课程号从大到小排列(不重点)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.s_name, c.c_name, sc.s_score</span><br><span class="line"><span class="keyword">FROM</span> score sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.c_id = c.c_id <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student st <span class="keyword">ON</span> sc.s_id = st.s_id</span><br><span class="line"><span class="keyword">WHERE</span> sc.s_score&lt;<span class="number">60</span>;</span><br></pre></td></tr></table></figure>

<h4 id="38、查询课程编号为03且课程成绩在80分以上的学生的学号和姓名（不重要）"><a href="#38、查询课程编号为03且课程成绩在80分以上的学生的学号和姓名（不重要）" class="headerlink" title="38、查询课程编号为03且课程成绩在80分以上的学生的学号和姓名（不重要）"></a>38、查询课程编号为03且课程成绩在80分以上的学生的学号和姓名（不重要）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.s_id, st.s_name, sc.c_id, sc.s_score</span><br><span class="line"><span class="keyword">FROM</span> score sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student st <span class="keyword">ON</span> sc.s_id = st.s_id</span><br><span class="line"><span class="keyword">WHERE</span> c_id = <span class="string">&#x27;03&#x27;</span> <span class="keyword">AND</span> s_score&gt;<span class="number">80</span>;</span><br></pre></td></tr></table></figure>

<h4 id="39、求每个课程的学生人数（不重要）"><a href="#39、求每个课程的学生人数（不重要）" class="headerlink" title="39、求每个课程的学生人数（不重要）"></a>39、求每个课程的学生人数（不重要）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.c_name, <span class="keyword">count</span>(<span class="keyword">distinct</span> sc.s_id) numbs</span><br><span class="line"><span class="keyword">FROM</span> course c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> c.c_id = sc.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">By</span> c.c_id;</span><br></pre></td></tr></table></figure>

<h4 id="42、查询每科成绩最好的前两名（同22和25题）"><a href="#42、查询每科成绩最好的前两名（同22和25题）" class="headerlink" title="42、查询每科成绩最好的前两名（同22和25题）"></a>42、查询每科成绩最好的前两名（同22和25题）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.c_name, st.s_name, t.s_score, t.rnk</span><br><span class="line"><span class="keyword">FROM</span> student st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">(<span class="keyword">SELECT</span> c_id, s_id, s_score, row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> c_id <span class="keyword">order</span> <span class="keyword">by</span> s_score <span class="keyword">desc</span>) rnk</span><br><span class="line"><span class="keyword">FROM</span> score) t <span class="keyword">ON</span> st.s_id = t.s_id <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> t.c_id = c.c_id</span><br><span class="line"><span class="keyword">WHERE</span> t.rnk&lt;=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h4 id="43、统计每科的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列（不重要）"><a href="#43、统计每科的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列（不重要）" class="headerlink" title="43、统计每科的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列（不重要）"></a>43、统计每科的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列（不重要）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.c_id, <span class="keyword">count</span>(<span class="keyword">distinct</span> sc.s_id) nums</span><br><span class="line"><span class="keyword">FROM</span> course c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> c.c_id = sc.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.c_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> sc.s_id)&gt;=<span class="number">5</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> nums <span class="keyword">desc</span>, c_id <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>

<h4 id="44、检索至少选修两科的学生学号（不重要）"><a href="#44、检索至少选修两科的学生学号（不重要）" class="headerlink" title="44、检索至少选修两科的学生学号（不重要）"></a>44、检索至少选修两科的学生学号（不重要）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id, <span class="keyword">count</span>(<span class="keyword">distinct</span> c_id) subjects</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c_id)&gt;=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>


<h4 id="45、查询选修了全部课程的学生信息（重点划红线地方）"><a href="#45、查询选修了全部课程的学生信息（重点划红线地方）" class="headerlink" title="45、查询选修了全部课程的学生信息（重点划红线地方）"></a>45、查询选修了全部课程的学生信息（重点划红线地方）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.*, <span class="keyword">count</span>(<span class="keyword">distinct</span> c_id) subjects</span><br><span class="line"><span class="keyword">FROM</span> score sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student st <span class="keyword">ON</span> sc.s_id = st.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c_id) = (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c_id) <span class="keyword">from</span> course);</span><br></pre></td></tr></table></figure>

<h4 id="46、查询各学生的年龄-注意：datediff-big-time-small-time-且结果只能是天数，需手动转换"><a href="#46、查询各学生的年龄-注意：datediff-big-time-small-time-且结果只能是天数，需手动转换" class="headerlink" title="46、查询各学生的年龄  注意：datediff(big_time, small_time), 且结果只能是天数，需手动转换"></a>46、查询各学生的年龄  注意：datediff(big_time, small_time), 且结果只能是天数，需手动转换</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id, s_name, <span class="keyword">floor</span>(<span class="keyword">DATEDIFF</span>(<span class="keyword">now</span>(),s_birth)/<span class="number">365</span>) age</span><br><span class="line"><span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>

<h1 id="47、查询没学过张老师讲授的任一课程的学生姓名"><a href="#47、查询没学过张老师讲授的任一课程的学生姓名" class="headerlink" title="47、查询没学过张老师讲授的任一课程的学生姓名"></a>47、查询没学过张老师讲授的任一课程的学生姓名</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name</span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> c_id <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">SELECT</span> c.c_id</span><br><span class="line"><span class="keyword">FROM</span> course c <span class="keyword">INNER</span> <span class="keyword">JOIN</span> teacher t <span class="keyword">ON</span> c.t_id = t.t_id</span><br><span class="line"><span class="keyword">WHERE</span> t.t_name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span>) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="48、查询两科以上不及格课程的同学的学号及其平均成绩（还可以，自己写的，答案中没有）"><a href="#48、查询两科以上不及格课程的同学的学号及其平均成绩（还可以，自己写的，答案中没有）" class="headerlink" title="48、查询两科以上不及格课程的同学的学号及其平均成绩（还可以，自己写的，答案中没有）"></a>48、查询两科以上不及格课程的同学的学号及其平均成绩（还可以，自己写的，答案中没有）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id, <span class="keyword">sum</span>(<span class="keyword">if</span>(<span class="keyword">ifnull</span>(s_score,<span class="number">0</span>)&lt;<span class="number">60</span>,<span class="number">1</span>,<span class="number">0</span>)) <span class="string">&quot;不及格科数&quot;</span>, <span class="keyword">AVG</span>(s_score) average</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">sum</span>(<span class="keyword">if</span>(<span class="keyword">ifnull</span>(s_score,<span class="number">0</span>)&lt;<span class="number">60</span>,<span class="number">1</span>,<span class="number">0</span>))&gt;=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h4 id="49、查询本月过生日的学生"><a href="#49、查询本月过生日的学生" class="headerlink" title="49、查询本月过生日的学生"></a>49、查询本月过生日的学生</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name, s_birth</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">month</span>(s_birth) = <span class="keyword">month</span>(<span class="keyword">now</span>());</span><br></pre></td></tr></table></figure>

<h5 id="变化，下个月过生日的人"><a href="#变化，下个月过生日的人" class="headerlink" title="变化，下个月过生日的人"></a>变化，下个月过生日的人</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name, s_birth</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">month</span>(s_birth) = <span class="keyword">month</span>(<span class="keyword">now</span>())+<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h5 id="变化，下周过生日的人，注意week的第二个参数是mode，1代表星期一为每周第一天"><a href="#变化，下周过生日的人，注意week的第二个参数是mode，1代表星期一为每周第一天" class="headerlink" title="变化，下周过生日的人，注意week的第二个参数是mode，1代表星期一为每周第一天"></a>变化，下周过生日的人，注意week的第二个参数是mode，1代表星期一为每周第一天</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name, s_birth</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">week</span>(s_birth,<span class="number">1</span>) = <span class="keyword">week</span>(<span class="keyword">now</span>(),<span class="number">1</span>)+<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
        <category>SQL经典50题</category>
      </categories>
      <tags>
        <tag>SQL-练习</tag>
      </tags>
  </entry>
  <entry>
    <title>基于时间的合作商绩效考核体系搭建</title>
    <url>/2021/01/08/%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E5%90%88%E4%BD%9C%E5%95%86%E7%BB%A9%E6%95%88%E8%80%83%E6%A0%B8%E4%BD%93%E7%B3%BB%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>为合作商近6个月的贡献情况打分，要求离当前时间越接近，分数的权重越高，且尽量保证公平。</p>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>在建模中用到4个重要特征，包含了三个时间点和一个完成率：</p>
<p>a. 项目开始时间点</p>
<p>b. 目标完成80%的时间点</p>
<p>c. 项目结束时间点</p>
<p>d. 项目最终完成率 。</p>
<p>找出这三个时间点与当前时间的时间差，时间差越小则分数权重越高。</p>
<a id="more"></a>

<h3 id="2-1-权重曲线设计"><a href="#2-1-权重曲线设计" class="headerlink" title="2.1 权重曲线设计"></a>2.1 权重曲线设计</h3><p>首先想到反比例函数和sigmoid函数，其图像如下所示。<strong>最终我选择了第2个函数</strong>，因为它将前三个月和后三个月区分的更加明显。</p>
<h3 id="2-2-优点"><a href="#2-2-优点" class="headerlink" title="2.2 优点"></a>2.2 优点</h3><ol>
<li>越接近当前时间的合作，其打分权重越高，降低早期合作对绩效评估的影响；</li>
<li>通过计算合作时间与当前的日期差，可以弱化新/老合作商的差别；</li>
</ol>
<h3 id="2-3-Why-80"><a href="#2-3-Why-80" class="headerlink" title="2.3 Why 80%"></a>2.3 Why 80%</h3><p>在建模中，希望对合作目标完成总目标80%的时间点做监控，并把该点加入评估模型中，其原因如下：</p>
<ol>
<li>把握合作进度，创造激励以完成更高目标（在详细计算中会进一步解释）。</li>
<li>未来可作为衡量同类合作商业务能力的一个指标（有些比较急的项目可以优先找效率高的合作商对接）。</li>
</ol>
<h2 id="3-详细计算方式"><a href="#3-详细计算方式" class="headerlink" title="3.详细计算方式"></a>3.详细计算方式</h2><p>大部分业务合作都是以月为单位的时间段，故评估时不能仅通过具体时间点计算权重，而取头尾的均值会更加有说服力。具体计算方式见下图：</p>
<p><strong>由此可以发现监控合作完成80%的时间点的作用：</strong>形成分段计算，有助于评估合作商。效率较低的合作商，其评分会收到影响；而效率较高，以及最终超额完成合作目标的合作商，他们的评分会被凸显。</p>
<h2 id="4-具体实现"><a href="#4-具体实现" class="headerlink" title="4.具体实现"></a>4.具体实现</h2><h3 id="4-1-数据"><a href="#4-1-数据" class="headerlink" title="4.1 数据"></a>4.1 数据</h3><img src="C:\Users\Max_1110\AppData\Roaming\Typora\typora-user-images\image-20210103222325515.png" alt="image-20210103222325515" style="zoom: 80%;" />

<p>该数据有以下特点：</p>
<ol>
<li>合作商a为老合作商，在11月和7月均有合作业务；合作商d为老合作商，但只有9月份有合作业务；而合作商b为新合作商，只有11月有合作业务。<strong>希望借此体现距当前越近的合作影响系数越高</strong>。</li>
<li>合作商b、c均为新合作商，且合作时间相同，但其工作效率不同，<strong>希望借此展示系统对效率高的合作商更为友好的特点</strong>。</li>
</ol>
<h3 id="4-2-代码"><a href="#4-2-代码" class="headerlink" title="4.2 代码"></a>4.2 代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&quot;demo.csv&quot;</span>)</span><br><span class="line"><span class="comment"># 更改数据格式，以便后期计算</span></span><br><span class="line">finish_rates = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    finish_rates.append(<span class="built_in">float</span>(data[<span class="string">&#x27;finish_percent&#x27;</span>][i][:<span class="number">-1</span>])/<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">day_diff</span>(<span class="params">column</span>):</span></span><br><span class="line">    diff_date = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(column)):</span><br><span class="line">        diff_date.append((datetime.today() - datetime.strptime(column[i],<span class="string">&quot;%Y/%m/%d&quot;</span>)).days)</span><br><span class="line">    <span class="keyword">return</span> diff_date</span><br><span class="line"><span class="comment"># 将修改后的数据放入表中</span></span><br><span class="line">data[<span class="string">&#x27;diff_start&#x27;</span>] = day_diff(data[<span class="string">&#x27;start_date&#x27;</span>])</span><br><span class="line">data[<span class="string">&#x27;diff_end&#x27;</span>] = day_diff(data[<span class="string">&#x27;end_date&#x27;</span>])</span><br><span class="line">data[<span class="string">&#x27;diff_80%&#x27;</span>] = day_diff(data[<span class="string">&#x27;80%_finished_date&#x27;</span>])</span><br><span class="line">data[<span class="string">&#x27;finished&#x27;</span>] = finish_rates</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设计计算公式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span><span class="number">-1.0</span>/(<span class="number">1</span>+np.exp(<span class="number">-0.4</span>*(x<span class="number">-10</span>)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluation</span>(<span class="params">time_start, time_80, time_end, finish_rate</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span>*(sigmoid2(time_start.values/<span class="number">9</span>)+sigmoid2(time_80.values/<span class="number">9</span>))*<span class="number">0.8</span> + \</span><br><span class="line">           <span class="number">0.5</span>*(sigmoid2(time_end.values/<span class="number">9</span>)+sigmoid2(time_80.values/<span class="number">9</span>))*(finish_rate.values<span class="number">-0.8</span>)</span><br><span class="line"><span class="comment"># 传入实际参数</span></span><br><span class="line">evaluation(data[<span class="string">&#x27;diff_start&#x27;</span>],data[<span class="string">&#x27;diff_80%&#x27;</span>],data[<span class="string">&#x27;diff_end&#x27;</span>],data[<span class="string">&#x27;finished&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>得到结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array([<span class="number">0.83568513</span>, <span class="number">0.83586366</span>, <span class="number">1.05750036</span>, <span class="number">0.26354649</span>, <span class="number">0.01963064</span>])</span><br></pre></td></tr></table></figure>

<p>把他们放回原表：</p>
<p>按相同合作商对evaluation列进行合并，此时发现合作商a在7月份的业务合作对整体评分的影响非常之低，达到了我们的设计要求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.groupby(<span class="string">&#x27;partner&#x27;</span>).<span class="built_in">sum</span>()[<span class="string">&#x27;eval&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\Max_1110\AppData\Roaming\Typora\typora-user-images\image-20210103224213834.png" alt="image-20210103224213834"></p>
<h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5.结论"></a>5.结论</h2><ul>
<li><p>由合作商a、b、d，可以发现评分的首要侧重点在于合作时间，故新老合作商基本可以保证公平，不会因为老合作商早期合作多形成巨大差距；</p>
</li>
<li><p>由合作商b、c，可以发现合作完成度越高，评分越占优势。</p>
</li>
</ul>
<h2 id="6-一些不足"><a href="#6-一些不足" class="headerlink" title="6.一些不足"></a>6.一些不足</h2><p><strong>本报告中默认所有合作业务有相同的考察指标，进而将变量控制在了距离当前时间这一关键点上</strong>，而在实际搭建模型中还需要其他合作业务的评估指标，才能将系统搭建的更为完善。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>字符与字符串</title>
    <url>/2019/12/26/%E5%AD%97%E7%AC%A6%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>C语言中字符和字符串的相关知识点。</p>
<a id="more"></a>

<h3 id="1-1字符型与整数型的输入输出"><a href="#1-1字符型与整数型的输入输出" class="headerlink" title="1.1字符型与整数型的输入输出"></a>1.1字符型与整数型的输入输出</h3><p>首先1与’1’在计算机中是不同的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c1;</span><br><span class="line">    <span class="keyword">char</span> c2;</span><br><span class="line">    c1 = <span class="number">1</span>;</span><br><span class="line">    c2 =<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(c1==c2)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;相同&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此可发现他们是不同的，分别以%d的形式输出c1，c2,<br>会得到c1=1,c2=49.<br>（char也是一种整型，所以可以按%d输出，但不能直接以%d形式输入。）</p>
<h3 id="1-2字符型输入的两种方式"><a href="#1-2字符型输入的两种方式" class="headerlink" title="1.2字符型输入的两种方式"></a>1.2字符型输入的两种方式</h3><p>1.直接以%c配合字符形式输入。</p>
<blockquote>
<p>scanf(“%c”,&amp;c1);</p>
</blockquote>
<p>此时输入’1’,即可将’1’赋给c1。</p>
<blockquote>
<p>printf(“‘%c’”,c1);</p>
</blockquote>
<p>得到1。</p>
<p>2.先用%d给另一个整型变量i输入，再将该i值赋给字符s1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;i);</span><br><span class="line">s1&#x3D;i;</span><br><span class="line">printf(&quot;&#39;%c&#39;&quot;,s1);</span><br></pre></td></tr></table></figure>
<p>此时如果给i输入49，则i将49传给s1，若按%c输出s1就是’1’，若按%d输出则为49.</p>
<h3 id="1-3混合输入输出"><a href="#1-3混合输入输出" class="headerlink" title="1.3混合输入输出"></a>1.3混合输入输出</h3><blockquote>
<p>scanf(“%d %c”,&amp;i,&amp;s1);</p>
</blockquote>
<blockquote>
<p>scanf(“%d%c”,&amp;i,&amp;s1);</p>
</blockquote>
<p>由于第一个函数%d与%c之间有空格，那么输完一个整型数字后的所有空格,tab,return都会被读掉，然后再去读s1.</p>
<p>而第二个函数%d%c之间没空格，所以整数就只读到整数结束为止，下面的东西读给s1,无论是空格，tab还是return都会给到c.</p>
<h3 id="1-4字符运算"><a href="#1-4字符运算" class="headerlink" title="1.4字符运算"></a>1.4字符运算</h3><p>注意两个式子：</p>
<blockquote>
<p>char a =’A;</p>
</blockquote>
<blockquote>
<p>a++;</p>
</blockquote>
<p>则a=’B’</p>
<p>如果要求两个字母间的距离，要用int</p>
<blockquote>
<p>int i= ‘a’-‘A;</p>
</blockquote>
<blockquote>
<p>printf(“%d”,i)=25</p>
</blockquote>
<p>用a+’a’-‘A’从大写变小写<br>用a+’A’-‘a’从小写变大写<br>注意第一个a是整数，不是字符，这里想表达一种变化性，当然也可以写成某一个特定字符。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">char</span> d;</span><br><span class="line">    c=<span class="string">&#x27;d&#x27;</span>+<span class="string">&#x27;A&#x27;</span>-<span class="string">&#x27;a&#x27;</span>;<span class="comment">//注意是字符d，</span></span><br><span class="line">    d=c+<span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;A&#x27;</span>;<span class="comment">//注意是变量c</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c d=%c&quot;</span>,c,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<blockquote>
<p>c=D d=d</p>
</blockquote>
<h2 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h2><h3 id="2-1字符数组与字符串——数组方式初始化字符串"><a href="#2-1字符数组与字符串——数组方式初始化字符串" class="headerlink" title="2.1字符数组与字符串——数组方式初始化字符串"></a>2.1字符数组与字符串——数组方式初始化字符串</h3><p>字符串也是字符数组，不过它的结尾是数字0（多表示成’\0’）。</p>
<p>正常的字符数组初始化：</p>
<blockquote>
<p>char s[]={‘H’,’E’,’L’,’L’,’O’,’!’};</p>
</blockquote>
<p>字符串数组的初始化：</p>
<blockquote>
<p>char s[]={‘H’,’E’,’L’,’L’,’O’,’!’,’\0’};</p>
</blockquote>
<p>就是因为结尾的0，才让这个字符数组变成了C语言的字符串。</p>
<h3 id="2-2字符串的存在形式"><a href="#2-2字符串的存在形式" class="headerlink" title="2.2字符串的存在形式"></a>2.2字符串的存在形式</h3><p>字符串以数组的形式存在，可以通过数组或指针的方式进行访问。</p>
<p>！！指针方式：</p>
<blockquote>
<p>char *str=”Hello”;</p>
</blockquote>
<p>注意这表示str是一个指针，指向的内容是字符类型的，只不过现在这个情况下它指的是个字符数组，所以它是字符串，他也完全可以指向一个单个字符，那就不是字符串了！</p>
<p>数组方式：除了上述的依次枚举表达方式，还有如下：</p>
<blockquote>
<p>char word[]=”Hello”;</p>
</blockquote>
<blockquote>
<p>char line[10]=”Hello”;</p>
</blockquote>
<p>注意双引号。</p>
<p>此外，紧密相邻的字符串会被连接起来：</p>
<blockquote>
<p>printf(“A”</p>
</blockquote>
<blockquote>
<p>“B”);</p>
</blockquote>
<p>最终会输出AB.</p>
<h3 id="2-3字符串在内存中的存储方式"><a href="#2-3字符串在内存中的存储方式" class="headerlink" title="2.3字符串在内存中的存储方式"></a>2.3字符串在内存中的存储方式</h3><p>以数组方式表达的字符串，其地址存在于计算机的代码段，是只读的，所以无法对数组表达的字符串进行修改。</p>
<p>同时，存储相同字符串的不同变量，他们的地址相同，相当于一人分饰两角。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *s=<span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *s1=<span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s=%p s1=%p&quot;</span>,s,s1); <span class="comment">//会发现s==s1;</span></span><br><span class="line">s[<span class="number">0</span>]=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,s[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>这样的程序是会报错的。换句话说：</p>
<p>char *s == const char *s 即指针所指向的char类型内容（即字符串）是const型的。</p>
<h3 id="2-4字符串的输入输出"><a href="#2-4字符串的输入输出" class="headerlink" title="2.4字符串的输入输出"></a>2.4字符串的输入输出</h3><p>常见的方式都是通过数组表达字符串，然后对其进行输入输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,<span class="built_in">string</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,<span class="built_in">string</span>);</span><br></pre></td></tr></table></figure>
<p>此处注意%s只读入单词，当你输入tab，空格，return都会默认该单词读完了。</p>
<p>为了更安全的输入，会写成%ns，n代表能输入的最大位数，由于本数组大小为8，且最后一位有0，所以最多还能输7位。</p>
<h2 id="三、指针方式的输入输出"><a href="#三、指针方式的输入输出" class="headerlink" title="三、指针方式的输入输出"></a>三、指针方式的输入输出</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *s=<span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *s1=<span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>,s,s1);</span><br></pre></td></tr></table></figure>
<p>我发现都可以输出Hello,World!.<br>这让我很疑惑，因为s和s1不是存放的地址吗，而想输出*s,*s1却也可以通过编译，但是无法输出内容。</p>
<p>我尝试了：</p>
<blockquote>
<p>printf(“%c %d”,*s,*s);</p>
</blockquote>
<p>输出得到了’H’ 72 (‘H’的ASCII码)</p>
<p>所以关于<strong>指针和数组</strong>之间的关系，我必须再看看C primer plus.</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>数据预处理</title>
    <url>/2020/09/08/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>本文基于kaggle上的房价预测项目，对数据预处理的流程进行总结。由于这是上手的第一个项目，数据预处理的过程相对比较简单，主要涵盖了数据感知可视化，outliers的清理，空值填充，及初步选取特征四个方面，后续会不断加入categorical encoding，添加特征等方法。</p>
<a id="more"></a>

<h2 id="1-关于题目"><a href="#1-关于题目" class="headerlink" title="1.关于题目"></a>1.关于题目</h2><p>题目链接：<a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques%E3%80%82">https://www.kaggle.com/c/house-prices-advanced-regression-techniques。</a></p>
<p>题目解读：围绕79个特征对Ames市的房价进行预测，其中44个特征是离散型的分类，35个特征是连续型的数值。</p>
<p>本文策略：在填充空值时，优先将筛选出的特征中的空值进行填充，而不是将所有特征中的空值填充，这样做的好处是比较简单，但同时注定无法构造一个底子很好的baseline。</p>
<h2 id="2-数据预处理"><a href="#2-数据预处理" class="headerlink" title="2.数据预处理"></a>2.数据预处理</h2><h3 id="1-导入必要包及数据"><a href="#1-导入必要包及数据" class="headerlink" title="1.导入必要包及数据"></a>1.导入必要包及数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment">#matplotlit infine</span></span><br><span class="line"></span><br><span class="line">train_data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-对数据进行初步探索"><a href="#2-对数据进行初步探索" class="headerlink" title="2.对数据进行初步探索"></a>2.对数据进行初步探索</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 探索数据维度,是否有空值等信息</span></span><br><span class="line">train_data.info()</span><br></pre></td></tr></table></figure>

<p>从这步可以看出来，Alley、FireplaceQu、PoolQC、Fence等特征存在较多的空值；同时有很多特征具有很强的相关性，比如GarageCars与GarageArea，1stFlrSF，2ndFlrSF 与GrLivArea等。这些可以留作后面优化baseline的策略；此外，观察了数据，发现有些空值存在的原因是因为一些房子本身就没有该配套设施所导致的，比如Garagetype为空的原因是该房子根本没有garage。</p>
<h3 id="3-观察特征X与SalePrice之间的相关性"><a href="#3-观察特征X与SalePrice之间的相关性" class="headerlink" title="3.观察特征X与SalePrice之间的相关性"></a>3.观察特征X与SalePrice之间的相关性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用pandas自带的关联矩阵，可以观察到变量与结果之间的相关性，并以热力图的方式呈现。</span></span><br><span class="line">corr = train_data.corr() <span class="comment">#生成相关性矩阵，默认的method是&#x27;pearson&#x27;，即皮尔森相关系数。</span></span><br><span class="line">fig = plt.figure(figsize =(<span class="number">10</span>,<span class="number">10</span>)) <span class="comment"># 构造画布</span></span><br><span class="line">sns.heatmap(data = corr, vmin= <span class="number">0.2</span>，cmap=<span class="string">&#x27;YlGnBu&#x27;</span>,square = <span class="literal">True</span>) <span class="comment">#过滤相关性在0.2以下的值,颜色采用蓝色系，以方形图表示。</span></span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/mw690/0060e3lIly1giljdrakaaj31180vctfc.jpg" alt="1.png"></p>
<p>由此可以看到SalePrice一项与特征中的’OverallQual’，’GrLivArea’，’TotalBsmtSF’，’GarageCars’四项的相关性比较大（热力图中颜色较深），故想单独把这4个特征提取出来，看看他们与SalePrice是否真的呈现某种线性关系。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 围绕四个相关性大的特征进行观察其与SalePrice的线性关系</span></span><br><span class="line">cols = [<span class="string">&#x27;OverallQual&#x27;</span>,<span class="string">&#x27;GrLivArea&#x27;</span>,<span class="string">&#x27;TotalBsmtSF&#x27;</span>,<span class="string">&#x27;GarageCars&#x27;</span>]</span><br><span class="line">fig = plt.figure()</span><br><span class="line">sns.pairplot(x_vars=cols, y_vars=<span class="string">&#x27;SalePrice&#x27;</span>, data=train_data)</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/mw690/0060e3lIly1gilje597yij315w0e0tbu.jpg" alt="2.png"></p>
<h3 id="3-针对outliers分析"><a href="#3-针对outliers分析" class="headerlink" title="3.针对outliers分析"></a>3.针对outliers分析</h3><p>通过图形可以发现，上述四个特征确实与SalePrice有较为明显的线性关系，但其中也有一些outliers，为了不影响模型的拟合，将这些outliers分析一下，如果确实比较离谱则将其丢弃。</p>
<h4 id="针对OverallCond："><a href="#针对OverallCond：" class="headerlink" title="针对OverallCond："></a>针对OverallCond：</h4><p>这个是我后面发现的，有一个OverallCond=2的样本点的售价远高于其他样本点，故将其drop掉。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.drop(index = train_data[(train_data[<span class="string">&#x27;OverallCond&#x27;</span>]==<span class="number">2</span>) &amp; (train_data[<span class="string">&#x27;SalePrice&#x27;</span>]&gt;<span class="number">200000</span>)].index,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h4 id="针对GrLivArea："><a href="#针对GrLivArea：" class="headerlink" title="针对GrLivArea："></a>针对GrLivArea：</h4><p>有两个点的非常靠右，但是售价非常低，大致估计其原因应该是地处偏僻，故直接删除。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.drop(index = train_data[(train_data[<span class="string">&#x27;GrLivArea&#x27;</span>]&gt;<span class="number">4000</span>) &amp; (train_data[<span class="string">&#x27;SalePrice&#x27;</span>]&lt;<span class="number">200000</span>)].index,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h4 id="针对TotalBsmtSF"><a href="#针对TotalBsmtSF" class="headerlink" title="针对TotalBsmtSF:"></a>针对TotalBsmtSF:</h4><p>同样有一个点的地下室面积非常大，但是售价很低，故将其drop。另外大于2500房价却小与200000数据点需要找出来单独分析一下原因，观察是不是outliers。(这里没找，没找到，略过了)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先drop离谱点，事实证明这就是刚刚drop掉那两个样本点中的一个</span></span><br><span class="line">train_data.drop(index = train_data[train_data[<span class="string">&#x27;TotalBsmtSF&#x27;</span>]&gt;<span class="number">6000</span>].index,inplace=<span class="literal">True</span>) </span><br></pre></td></tr></table></figure>

<h4 id="针对GarageCars"><a href="#针对GarageCars" class="headerlink" title="针对GarageCars:"></a>针对GarageCars:</h4><p>针对GarageCars我重新做了箱线图，发现可以容纳4个车位的Garage平均售价远低于可以容纳3个车位的房子，我不知道是不是应该将他们drop点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 围绕GarageCars做的箱线图</span></span><br><span class="line">sns.boxplot(x=<span class="string">&#x27;GarageCars&#x27;</span>,y=<span class="string">&#x27;SalePrice&#x27;</span>,data=train_data)</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/mw690/0060e3lIly1giljh0g8fkj30qq0fkmy4.jpg" alt="3.png"></p>
<p>将所有GarageCars=4的数据提取出来进行观察。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.loc[index_of_4cars,:][[<span class="string">&#x27;SalePrice&#x27;</span>,<span class="string">&#x27;GarageArea&#x27;</span>,<span class="string">&#x27;GarageFinish&#x27;</span>]]</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/mw690/0060e3lIly1giljm41z7gj30h409wt91.jpg" alt="4.png"></p>
<p>另外求一下不同GarageCars的房子的平均GarageArea。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data[<span class="string">&#x27;GarageArea&#x27;</span>].groupby(train_data[<span class="string">&#x27;GarageCars&#x27;</span>]).mean()</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/mw690/0060e3lIly1giljqay95kj30eo06oq36.jpg" alt="5.png"></p>
<p>可以发现1340号房屋的GarageCars虽然是4，但是其GarageArea非常小，同时它的车库还是未完工的状态（Unf），所以1340号房屋的售价较低是可以解释的。不过1190号房屋的车库面积非常大，同时是完工状态，不过其售价非常低，有悖于刚刚的结论，所以考虑将其删除。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除1190号房屋</span></span><br><span class="line">train_data.drop(index=<span class="number">1190</span>,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>目前已经针对几个主要属性，将部分outliers进行过滤，下面将训练集的index进行重置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.reset_index(inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-围绕Garage属性进行特征筛选"><a href="#4-围绕Garage属性进行特征筛选" class="headerlink" title="4.围绕Garage属性进行特征筛选"></a>4.围绕Garage属性进行特征筛选</h3><p>由于数据集中经常出现GarageCars很大但GarageArea小的情况，比如一个可以容纳4个车的车库只有480平，反之，样本中也可能出现只容纳1个车但车库面积非常大的现象。所以我打算用GarageArea除以GarageCars，观察每个车位的平均Area，看该特征下SalePrice的线性是否明显。    </p>
<p><img src="http://ww1.sinaimg.cn/mw690/0060e3lIly1gillwztz7wj30cc0bagmh.jpg" alt="6.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建一个新的字段</span></span><br><span class="line">train_data[<span class="string">&#x27;Avg_Garage&#x27;</span>] = train_data[<span class="string">&#x27;GarageArea&#x27;</span>]/(train_data[<span class="string">&#x27;GarageCars&#x27;</span>]+<span class="number">0.001</span>)</span><br><span class="line"><span class="comment"># 观察以Avg_Garage为自变量的SalePrice变化。</span></span><br><span class="line">sns.pairplot[x_vars=<span class="string">&#x27;Avg_Garage&#x27;</span>,y_vars=<span class="string">&#x27;SalePrice&#x27;</span>,data=train_data]</span><br></pre></td></tr></table></figure>

<p>依然没看出来有线性关系，当Avg_Garage变大时，部分房子的售价非常的低，所以不打算就这个Avg_Garage再深入了。另外我观察了GarageArea的散点图，发现它的线性关系更加明显，所以最终二选一的话我会选Area而不是Cars。<img src="http://ww1.sinaimg.cn/mw690/0060e3lIly1gillwlgw03j30c40ast9s.jpg" alt="8.png"></p>
<p>接下来我围绕GarageCars和GarageFinish进行groupby，观察到在每个档次的GarageCars里，Fin&gt;Rfn&gt;Ufn。所以我想把GarageFinish也当作一个影响总价的重要特征，纳入考虑。</p>
<p><img src="http://ww1.sinaimg.cn/mw690/0060e3lIly1gillx805c9j30iu0cwt9l.jpg" alt="7.png"></p>
<p>综上，围绕Garage我将选择GarageArea及GarageFinish作为两个主要特征。</p>
<h3 id="5-利用pearson相关系数找到与SalePrice最相关的几个属性。"><a href="#5-利用pearson相关系数找到与SalePrice最相关的几个属性。" class="headerlink" title="5.利用pearson相关系数找到与SalePrice最相关的几个属性。"></a>5.利用pearson相关系数找到与SalePrice最相关的几个属性。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">corr = train_data.corr() <span class="comment"># 相关性矩阵（dataframe）</span></span><br><span class="line">k = <span class="number">10</span></span><br><span class="line">cols = corr.nlargest(k,<span class="string">&#x27;SalePrice&#x27;</span>).index <span class="comment">#按&#x27;SalePrice&#x27;排列的前k行，并返回它们的index</span></span><br><span class="line">cm = np.corrcoef(train_data[cols].values.T) <span class="comment"># 计算pearson相关系数，接受的参数是一个矩阵，返回的也是一个矩阵，</span></span><br><span class="line">sns.<span class="built_in">set</span>(font_scale=<span class="number">0.8</span>)</span><br><span class="line">heatmap = sns.heatmap(cm,annot=<span class="literal">True</span>,yticklabels=cols.values,xticklabels=cols.values,cmap=<span class="string">&#x27;YlGnBu&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/mw690/0060e3lIly1gillxfyxodj30ne0gwjwa.jpg" alt="9.png"></p>
<p>综上，我将选择OverallQual,GrLivArea,TotalBsmtSF,GarageArea,GarageFinish,</p>
<p>1stFirSF,FullBath,TotRmsAbvGrd,YearBuilt作为最终特征。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cols = [<span class="string">&#x27;OverallQual&#x27;</span>,<span class="string">&#x27;GrLivArea&#x27;</span>, <span class="string">&#x27;GarageArea&#x27;</span>,<span class="string">&#x27;GarageFinish&#x27;</span>,<span class="string">&#x27;TotalBsmtSF&#x27;</span>, <span class="string">&#x27;FullBath&#x27;</span>, <span class="string">&#x27;1stFirSF&#x27;</span>,<span class="string">&#x27;TotRmsAbvGrd&#x27;</span>,<span class="string">&#x27;YearBuilt&#x27;</span>]</span><br><span class="line"><span class="comment"># 将GarageFinish进行Categorical编码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cols = [<span class="string">&#x27;OverallQual&#x27;</span>,<span class="string">&#x27;GrLivArea&#x27;</span>, <span class="string">&#x27;GarageArea&#x27;</span>,<span class="string">&#x27;GarageFinish&#x27;</span>,<span class="string">&#x27;TotalBsmtSF&#x27;</span>, <span class="string">&#x27;FullBath&#x27;</span>, <span class="string">&#x27;1stFirSF&#x27;</span>,<span class="string">&#x27;TotRmsAbvGrd&#x27;</span>,<span class="string">&#x27;YearBuilt&#x27;</span>]</span><br><span class="line">x = train_data[cols].values</span><br><span class="line">y = train_data[<span class="string">&#x27;SalePrice&#x27;</span>].values</span><br><span class="line">x_scaled = preprocessing.StandardScaler().fit_transform(x)</span><br><span class="line">y_scaled = preprocessing.StandardScaler().fit_transform(y.reshape(<span class="number">-1</span>,<span class="number">1</span>))</span><br><span class="line">X_train,X_test, y_train, y_test = train_test_split(x_scaled, y_scaled, test_size=<span class="number">0.33</span>, random_state=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>SKlearn</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2020/10/27/%E6%B6%88%E9%99%A4%E8%AD%A6%E5%91%8A%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>本文记录了使用SKlearn进行机器学习过程中遇到的一些问题，包括数据可视化及数据预处理。</p>
<a id="more"></a>

<h2 id="1-消除警告信息"><a href="#1-消除警告信息" class="headerlink" title="1.消除警告信息"></a>1.消除警告信息</h2><p>python开发中经常遇到报错的情况，但是warning通常并不影响程序的运行，而且有时特别讨厌，该语句主要用来忽略warning错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-更改图标显示风格，非必要"><a href="#2-更改图标显示风格，非必要" class="headerlink" title="2.更改图标显示风格，非必要"></a>2.更改图标显示风格，非必要</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.style.use(<span class="string">&#x27;ggplot&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-sklearn的转换器和分类器"><a href="#3-sklearn的转换器和分类器" class="headerlink" title="3.sklearn的转换器和分类器"></a>3.<strong>sklearn的转换器和分类器</strong></h2><h3 id="1-BaseEstimator"><a href="#1-BaseEstimator" class="headerlink" title="(1)BaseEstimator:"></a>(1)BaseEstimator:</h3><p>基础分类器的类（Base class for all estimators in scikit-learn）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InductiveClusterer</span>(<span class="params">BaseEstimator</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, clusterer, classifier</span>):</span></span><br><span class="line">        self.clusterer = clusterer</span><br><span class="line">        self.classifier = classifier</span><br><span class="line"><span class="comment">#这里表示新建一个派生类InductiveClusterer,它继承了基类BaseEstimator</span></span><br></pre></td></tr></table></figure>

<p><strong>名称 BaseClassName 必须定义于包含派生类定义的作用域中</strong>。也允许用其他任意表达式代替基类名称所在的位置。 这有时也可能会用得上，例如，当基类定义在另一个模块中的时候:</p>
<p><strong>class DerivedClassName(modname.BaseClassName):</strong></p>
<h3 id="2-其他分类器和转换器"><a href="#2-其他分类器和转换器" class="headerlink" title="(2)其他分类器和转换器"></a>(2)其他分类器和转换器</h3><p>ClassifierMixin是基础转换器, RegressorMixin基础回归器,TransformerMixin是基础转换器。</p>
<p>RegressorMixin和ClassifierMixin里只有Score方法，没有fit方法，需要自己写到mixin里去实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.base <span class="keyword">import</span> BaseEstimator, TransformerMixin, RegressorMixin, clone</span><br></pre></td></tr></table></figure>

<h2 id="4-RobustScaler与StandardScaler的区别"><a href="#4-RobustScaler与StandardScaler的区别" class="headerlink" title="4.RobustScaler与StandardScaler的区别"></a>4.RobustScaler与StandardScaler的区别</h2><p>StandardScaler可以将数据中心化，具体的操作是将数据减去均值后除以标准差。</p>
<p>而对于有离群点，尤其是outliers比较多的情况，使用均值和标准差方式标准化效果不好，这种时候考虑用RobustScaler。具体的方法是移除中位数并根据IQR范围对数据缩放（IQR:在1分位数和3分位数之间）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> RobustScaler, StandardScaler</span><br></pre></td></tr></table></figure>

<h2 id="5-引入均方误差"><a href="#5-引入均方误差" class="headerlink" title="5.引入均方误差"></a>5.引入均方误差</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">y_true = [<span class="number">3.0</span>, <span class="number">-0.5</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br><span class="line">y_pred = [<span class="number">2.5</span>,  <span class="number">0.0</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line">mean_squred_error(y_true,y_min) <span class="comment">#0.375</span></span><br><span class="line">mean_squred_error(y_true,y_min,squared=<span class="literal">False</span>) <span class="comment">#0.612</span></span><br><span class="line"><span class="comment">#squred: If True returns MSE value, if False returns RMSE value.</span></span><br></pre></td></tr></table></figure>

<h2 id="6-pipeline和make-pipeline"><a href="#6-pipeline和make-pipeline" class="headerlink" title="6.pipeline和make_pipeline"></a>6.pipeline和make_pipeline</h2><p>pipeline是你给steps命名，而make_pipeline是根据方法自动命名steps。</p>
<p>The only difference is that <code>make_pipeline</code> generates names for steps automatically.</p>
<p>Step names are needed e.g. if you want to use a pipeline with model selection utilities (e.g. GridSearchCV). With grid search you need to specify parameters for various steps of a pipeline:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pipe = Pipeline([(<span class="string">&#x27;vec&#x27;</span>, CountVectorizer()), (<span class="string">&#x27;clf&#x27;</span>, LogisticRegression()])</span><br><span class="line">param_grid = [&#123;<span class="string">&#x27;clf__C&#x27;</span>: [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>]&#125;</span><br><span class="line">gs = GridSearchCV(pipe, param_grid)</span><br><span class="line">gs.fit(X, y)</span><br></pre></td></tr></table></figure>

<p>compare it with make_pipeline:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pipe = make_pipeline(CountVectorizer(), LogisticRegression())     </span><br><span class="line">param_grid = [&#123;<span class="string">&#x27;logisticregression__C&#x27;</span>: [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>]&#125;</span><br><span class="line">gs = GridSearchCV(pipe, param_grid)</span><br><span class="line">gs.fit(X, y)</span><br></pre></td></tr></table></figure>

<p>So, with <code>Pipeline</code>:</p>
<ul>
<li>names are explicit, you don’t have to figure them out if you need them;</li>
<li><strong>name doesn’t change if you change estimator/transformer used in a step, e.g. if you replace LogisticRegression() with LinearSVC() you can still use <code>clf__C</code>.</strong></li>
</ul>
<p><code>make_pipeline</code>:</p>
<ul>
<li>shorter and arguably more readable notation;</li>
<li>names are auto-generated using a straightforward rule (lowercase name of an estimator).</li>
</ul>
<p>When to use them is up to you :) I prefer make_pipeline for quick experiments and Pipeline for more stable code; a rule of thumb: IPython Notebook -&gt; make_pipeline; Python module in a larger project -&gt; Pipeline. But it is certainly not a big deal to use make_pipeline in a module or Pipeline in a short script or a notebook.</p>
<h3 id="7-克隆estimator"><a href="#7-克隆estimator" class="headerlink" title="7.克隆estimator"></a>7.克隆estimator</h3><p>Constructs a new estimator with the same parameters.</p>
<p>Clone does a deep copy of the model in an estimator without actually copying attached data. It yields a new estimator with the same parameters that has not been fit on any data.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.base.clone(estimator, *, safe=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="8-sklearn-impute-SimpleImputer"><a href="#8-sklearn-impute-SimpleImputer" class="headerlink" title="8.sklearn.impute.SimpleImputer"></a>8.sklearn.impute.SimpleImputer</h3><p>用来填补缺失值（missing_valules），采取strategy策略，注意strategy一般都应用在各列（column）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sklearn</span>.<span class="title">impute</span>.<span class="title">SimpleImputer</span>(<span class="params">*, missing_values=nan, strategy=<span class="string">&#x27;mean&#x27;</span>, fill_value=<span class="literal">None</span>, verbose=<span class="number">0</span>, copy=<span class="literal">True</span>, add_indicator=<span class="literal">False</span></span>)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>imp_mean = SimpleImputer(missing_values=np.nan, strategy=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>imp_mean.fit([[<span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, np.nan, <span class="number">3</span>], [<span class="number">10</span>, <span class="number">3</span>, np.nan]])</span><br><span class="line">SimpleImputer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = [[np.nan, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, np.nan, <span class="number">5</span>], [<span class="number">1</span>,<span class="number">4</span>,np.nan]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(imp_mean.transform(X))</span><br><span class="line">array([[<span class="number">6.33333333</span>, <span class="number">2.</span>        , <span class="number">3.</span>        ],</span><br><span class="line">       [<span class="number">2.</span>        , <span class="number">2.5</span>       , <span class="number">5.</span>        ],</span><br><span class="line">       [<span class="number">1.</span>        , <span class="number">4.</span>        , <span class="number">3.</span>        ]])</span><br><span class="line"><span class="comment">#注意是拿第一个数组fit后的参数去填充第二个数组的missing_values.</span></span><br></pre></td></tr></table></figure>

<h3 id="9-scipy-stats库"><a href="#9-scipy-stats库" class="headerlink" title="9.scipy_stats库"></a>9.scipy_stats库</h3><p>主要包含了一些统计学上的特征值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> skew</span><br></pre></td></tr></table></figure>

<h3 id="10-pandas中的transform和apply函数"><a href="#10-pandas中的transform和apply函数" class="headerlink" title="10.pandas中的transform和apply函数"></a>10.pandas中的transform和apply函数</h3><p><a href="https://zhuanlan.zhihu.com/p/86350553">https://zhuanlan.zhihu.com/p/86350553</a></p>
<h3 id="11-map函数"><a href="#11-map函数" class="headerlink" title="11.map函数"></a>11.map函数</h3><p>注意DataFrame和Series的map函数和python内置的有些不同。</p>
<h3 id="12-select-dtypes函数"><a href="#12-select-dtypes函数" class="headerlink" title="12.select_dtypes函数"></a>12.select_dtypes函数</h3><p>一个dataframe中可能有多种类型的数据，select_dtypes用于选择某种特定类型的数据。</p>
<p>include:包含该类型的都要，exclude:除了该类型的都要。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DataFrame.select_dtypes(include = <span class="literal">None</span>, exclude = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>罗格斯特征数</title>
    <url>/2020/10/27/%E7%BD%97%E6%A0%BC%E6%96%AF%E7%89%B9%E5%BE%81%E6%95%B0/</url>
    <content><![CDATA[<p>现第一行有0 1 2 3 4 5 6 7 8 9这10个数字。</p>
<p>在第二行这10个数字下方以如下方法填入新的数字：每个位置填入的数字是上方对应的数字将要在第二行出现的次数。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
<th align="center">7</th>
<th align="center">8</th>
<th align="center">9</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>思路： 判断哪个数字应该出现的次数最多</p>
]]></content>
      <categories>
        <category>概率论</category>
      </categories>
      <tags>
        <tag>概率趣味题</tag>
      </tags>
  </entry>
  <entry>
    <title>赛马问题</title>
    <url>/2020/11/07/%E8%B5%9B%E9%A9%AC%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>有64匹马，一共有8个赛道，想要找出最快的4匹马，要比赛最少多少轮才可以？</p>
<a id="more"></a>

<p>要点：</p>
<ol>
<li>注意只是选出最快的4匹，并不用对他们进行排序。</li>
<li>时刻记住只要某匹马前面有4匹比它快，他就要淘汰。</li>
</ol>
<p>答案：最快的情况需要10轮，极端情况需要11轮。</p>
<p>首先将64匹马分成8组，进行8轮比赛。在这8组比赛中，淘汰每轮比赛的后四名—剩32匹马。（8轮）</p>
<p>然后将8个组的第一名一起赛一下，只保留前4名所属的组—剩16匹马。（1轮）</p>
<p>剩下的如图所示：</p>
<table>
<thead>
<tr>
<th align="center">A1</th>
<th align="center">A2</th>
<th align="center">A3</th>
<th align="center">A4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">B1</td>
<td align="center">B2</td>
<td align="center">B3</td>
<td align="center">B4</td>
</tr>
<tr>
<td align="center">C1</td>
<td align="center">C2</td>
<td align="center">C3</td>
<td align="center">C4</td>
</tr>
<tr>
<td align="center">D1</td>
<td align="center">D2</td>
<td align="center">D3</td>
<td align="center">D4</td>
</tr>
</tbody></table>
<p>当前已知的排序是：</p>
<p>A1&gt;B1&gt;C1&gt;D1</p>
<p>A1&gt;A2&gt;A3&gt;A4</p>
<p>B1&gt;B2&gt;B3&gt;B4</p>
<p>C1&gt;C2&gt;C3&gt;C4</p>
<p>D1&gt;D2&gt;D3&gt;D4</p>
<p>如果某匹马前面有4只比它快，它就要淘汰，所以D2,D3,D4,C3,C4,B4注定要淘汰，只剩下左半区的，如下所示：</p>
<table>
<thead>
<tr>
<th align="center">A1</th>
<th align="center">A2</th>
<th align="center">A3</th>
<th align="center">A4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">B1</td>
<td align="center">B2</td>
<td align="center">B3</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">C1</td>
<td align="center">C2</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">D1</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>并且可以知道当前A1是最快的，所以问题变成了从剩余9匹马中选3匹最快的<strong>（你无需知道这三匹谁更快，找出来即可）</strong></p>
<p>由此看来，2步内必然能够完成，但是有没有一些情况可以一步到位?</p>
<p>假设B1是前4中的一员，现在看一下剩下8匹马中最快的。分为以下3中情况：</p>
<ol>
<li><p>如果最快的马是B2或C1,那证明A组剩下的都必然没B1快，所以这8匹马中的前两名以及A1,B1就是最后的4匹马。</p>
</li>
<li><p>如果8匹中最快是A2，那看8匹中的第二快。如果是B2或者C1的话，依然可以做出判断，最后的马是A1,A2,B1以及B2/C1之一。</p>
</li>
<li><p>如果8匹马中最快的是A2，第二是A3，就看第三名。如果第三名不是A4，那结束判断，最后的马是A1,A2,A3,B1。（因为A4都没跑过B2或C1中的那个，更不会跑过B1）</p>
</li>
<li><p>如果8匹马中最快的是A2,A3,A4，很不幸，再加一轮比较以下B1和A4吧。</p>
</li>
</ol>
<p>前三种情况下都只需要1轮，就能下决断，只有第四种情况需要为判断B1和A4而多加1轮。</p>
<p>综上所述，10轮或11轮都有可能。</p>
]]></content>
      <categories>
        <category>概率论</category>
      </categories>
      <tags>
        <tag>概率趣味题</tag>
      </tags>
  </entry>
</search>
